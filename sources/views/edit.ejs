<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Carnet d'Annuaire</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        html, body {
            height: 100%; /* S'assure que html et body prennent toute la hauteur */
            margin: 0; /* Enlève les marges par défaut */
        }
        body {
            /* background-color: #FFFCC4; */ /* Commenté, vous avez déjà un dégradé */
            background: linear-gradient(to bottom, #fff4b2, #d1c93b); /* Dégradé du jaune clair vers un jaune plus doux */
            min-height: 100vh; /* La hauteur minimale du corps est de 100% de la fenêtre */
        }
	.nav-tabs .nav-item .nav-link {
            border: 1px solid #fff4b2; /* Bordure pour tous les onglets */
            border-bottom: none; /* Enlève la bordure inférieure pour tous les onglets */
            background-color: #B19F8C; /* Fond beige pour les onglets */
            border-radius: 5px 5px 0 0; /* Arrondir uniquement le haut des onglets */
            margin-right: -1px; /* Pour éviter que les bordures se chevauchent */
            color: #000000; /* Couleur du texte en noir */
        }
        .nav-tabs .nav-item .nav-link.active {
            border: 1px solid #000000; /* Bordure noire pour l'onglet actif */
            border-bottom: none; /* Retire la bordure inférieure de l'onglet actif */
	    border-right: 2px solid #000000; /* Assure que la bordure droite est visible */
            background-color: #ffffe0; /* Fond clair pour l'onglet actif */
            color: #000000; /* Couleur du texte de l'onglet actif en noir */
	    padding-top: 9px; /* Ajustez selon vos besoins */
        }
        .nav-tabs .nav-item .nav-link:not(.active) { /* Cibler spécifiquement les onglets non actifs */
            background-color: #D1C6A9; /* Fond beige clair pour l'onglet non actif */
	    border-bottom: 1px solid #000000; /* Ajoute une bordure inférieure noire pour les onglets non actifs */
            color: #000000; /* Couleur du texte en noir */
        }
        .tab-content {
            background-color: #ffffe0; /* Fond jaune clair pour le contenu des onglets */
            padding: 15px; /* Ajout de padding pour l'intérieur des onglets */
            border: 1px solid #000000; /* Bordure noire pour le contenu des onglets */
            border-radius: 5px; /* Coins arrondis pour le contenu des onglets */
            margin-top: -1px; /* Pour ajuster la superposition de la bordure avec les onglets */
        }
        .edit-btn {
            background: none;
            border: none;
            cursor: pointer;
            color: #007bff; /* Couleur du bouton d'édition */
            padding: 0; /* Supprime le padding pour un bouton plus compact */
            font-size: 0.9em; /* Réduit la taille de la police pour le bouton */
        }
        .edit-btn i {
            font-size: 0.8em; /* Réduit la taille de l'icône */
        }
	.btn-restore {
            background-color: #FFE0B2; /* Couleur orange plus clair */
            border: 0px solid #F5F5DC; /* Bordure d'une teinte légèrement plus foncée */
            color: black; /* Couleur du texte en noir */
        }
        .btn-restore:hover {
            background-color: #FFA726; /* Couleur plus foncée au survol */
        }
	.btn-exit {
            background-color: #FFCC80; /* Couleur orange pastel */
            border: 0px solid #F5F5DC; /* Bordure d'une teinte légèrement plus foncée */
            color: black; /* Couleur du texte en black */
        }
        .btn-exit:hover {
            background-color: #FFA726; /* Couleur plus foncée au survol */
        }
        .btn-save {
            position: relative;
            background-color: #FFFFF0; /* Couleur beige pour le bouton */
            border: 0px solid #3A6A2A; /* Bordure vert foncé pour un meilleur contraste */
            color: #000; /* Couleur du texte par défaut */
        }
        .btn-save:hover {
            background-color: #E0E0E0; /* Couleur beige plus foncé au survol */
        }
	.btn-save.disabled:hover {
	    background-color: #F5F5DC; /* Rétablir la couleur d'origine lorsqu'il est désactivé */
	    cursor: not-allowed; /* Change le curseur pour indiquer que le bouton est désactivé */
	}
        .btn-save.enabled {
            color: #9B111E; /* Rouge rubis lorsqu'il est activé */
            background-color: #98FB98; /* Vert tendre lorsque activé */
        }
        .modal-content {
            background-color: #ffffe0; /* Fond jaune clair pour la modale */
            border-radius: 15px; /* Arrondir les angles de la fenêtre modale */
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2); /* Ajoute une ombre douce autour de la modale */
        }
    </style>
</head>
<body>
    <div class="container mt-5 position-relative">
        <h1>Carnet d'Annuaire</h1>

        <!-- Conteneur pour les boutons avec Flexbox -->
        <div class="d-flex justify-content-end mb-3">
            <button id="restoreButton" class="btn btn-restore" onclick="restoreValues()">Restaurer les valeurs</button>
	    <button id="exitButton" class="btn btn-exit ml-2" style="width: 120px;" onclick="exit()">Exit</button> <!-- Nouveau bouton 'Exit' -->
            <form action="/update/<%= dn %>" method="POST" class="ml-2">
                <button type="submit" id="saveButton" class="btn btn-save" style="width: 120px;" disabled>Valider</button>
            </form>
        </div>

        <!-- Nav tabs -->
        <ul class="nav nav-tabs" id="myTab" role="tablist">
            <% objectClassesDetails.forEach((objectClass, index) => { %>
                <li class="nav-item">
                    <a class="nav-link <%= index === 0 ? 'active' : '' %>" id="<%= objectClass.NAME %>-tab" data-toggle="tab" href="#<%= objectClass.NAME %>" role="tab" aria-controls="<%= objectClass.NAME %>" aria-selected="<%= index === 0 %>"><%= objectClass.NAME %></a>
                </li>
            <% }) %>
            <li class="nav-item">
                <a class="nav-link" id="add-tab" data-toggle="tab" href="#add" role="tab" aria-controls="add" aria-selected="false">+</a>
            </li>
        </ul>

	       <!-- Tab panes -->
        <div class="tab-content" id="myTabContent">
            <% objectClassesDetails.forEach((objectClass, index) => { %>
                <div class="tab-pane fade <%= index === 0 ? 'show active' : '' %>" id="<%= objectClass.NAME %>" role="tabpanel" aria-labelledby="<%= objectClass.NAME %>-tab">
                    <h3></h3> <!-- Suppression de "Attributes" -->

                    <form action="/update/<%= objectClass.NAME %>" method="POST">
                        <h4 class="underline">Attributs obligatoires :</h4>
                        <ul>
                            <% if (objectClass.MUST) {
                                Object.keys(objectClass.MUST).forEach(attrName => {
                                    const objectAttribute = objectClass.MUST[attrName];
                                    const displayLabel = objectAttribute.customWording || attrName;
                            %>
                                <li>
                                    <strong><%= displayLabel %>:</strong>
                                    <button type="button" class="edit-btn" onclick="openEditModal(<%= JSON.stringify(attrName) %>, <%= JSON.stringify(objectAttribute) %>)">
                                        <i class="fas fa-pencil-alt"></i>
                                    </button>
                                    <input type="text"
                                           name="<%= JSON.stringify(attrName) %>"
                                           value="<%= objectAttribute.values && objectAttribute.values.length > 0 ? objectAttribute.values[0] : '' %>"
                                           class="form-control"
                                           onfocus="valueOnfocus(this)"
                                           oninput="checkSaveButton(); checkInputFunction(this, <%= JSON.stringify(attrName) %>, <%= JSON.stringify(objectAttribute) %>, <%= JSON.stringify(objectClassesDetails) %>);" \>
                                </li>
                            <% })
                            } %>
                        </ul>

                        <h4 class="underline">Attributs optionnels :</h4>
                        <ul>
                            <% if (objectClass.MAY) {
                                Object.keys(objectClass.MAY).forEach(attrName => {
                                    const objectAttribute = objectClass.MAY[attrName];
                                    const displayLabel = objectAttribute.customWording || attrName;
                            %>
                                <li>
                                    <strong><%= displayLabel %>:</strong>
                                    <button type="button" class="edit-btn" onclick="openEditModal(<%= JSON.stringify(attrName) %>, <%= JSON.stringify(objectAttribute) %>)">
                                        <i class="fas fa-pencil-alt"></i>
                                    </button>
                                    <input type="text"
                                           name="<%= JSON.stringify(attrName) %>"
                                           value="<%= objectAttribute.values && objectAttribute.values.length > 0 ? objectAttribute.values[0] : '' %>"
                                           class="form-control"
                                           onfocus="valueOnfocus(this)"
                                           oninput="checkSaveButton(); checkInputFunction(this, <%= JSON.stringify(attrName) %>, <%= JSON.stringify(objectAttribute) %>, <%= JSON.stringify(objectClassesDetails) %>);" \>
                                </li>
                            <% })
                            } %>
                        </ul>
                    </form>
                </div>
            <% }) %>

            <!-- Tab pour ajouter une nouvelle objectClass -->
            <div class="tab-pane fade" id="add" role="tabpanel" aria-labelledby="add-tab">
                <h3>Ajouter une nouvelle objectClass</h3>
                <form action="/add" method="POST">
                    <div class="form-group">
                        <label for="objectClassName">Nom de l'objectClass</label>
                        <input type="text" id="objectClassName" name="objectClassName" class="form-control" required>
                    </div>
                    <div class="form-group">
                        <label for="attributes">Attributs (JSON)</label>
                        <textarea id="attributes" name="attributes" class="form-control" rows="5" placeholder='{"MUST": [], "MAY": []}' required></textarea>
                    </div>
                    <button type="submit" class="btn btn-success">Ajouter</button>
                </form>
            </div>
        </div>

        <!-- Modale pour l'édition d'attributs -->
        <div class="modal fade" id="editModal" tabindex="-1" role="dialog" aria-labelledby="editModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="editModalLabel">Modifier le libellé d'attribut "<span id="attributeName"></span>"</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Fermer">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label for="newLabel">Libellé d'affichage de l'attribut :</label>
                            <input type="text" class="form-control" id="newLabel" style='color:black;'>
                        </div>
                        <div class="form-group">
                            <label for="jsValidation">Code JS de contrôle de saisie :</label>
                            <textarea class="form-control" id="jsValidation" rows="10" placeholder="Saisissez le code JavaScript ici..."></textarea>
                        </div>
                    </div>
                    <div class="modal-footer d-flex justify-content-between">
                        <div>
                            <button type="button" class="btn btn-light btn-sm" onclick="changeModalSize(false)" style="background-color: #ffffe0; border: none;"> &gt;&lt; </button>
                            <button type="button" class="btn btn-light btn-sm" onclick="changeModalSize(true)" style="background-color: #ffffe0; border: none;"> &lt;&gt; </button>
                        </div>
                        <div>
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Annuler</button>
                            <button type="button" class="btn btn-primary" onclick="saveAttributNewLabel(<%= JSON.stringify(objectClassesDetails) %>)">Valider</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
        <script>
            let defaultAttributeLabel = ''; // Pour garder la valeur par défaut du nom d'attribut  
            let initialValueOnCurrentInput = ''; // Mémorise les valeurs de champs avant toute saisie pour utilisation dans checkInputFunction()
			const currentTabInputValues = {};

			function valueOnfocus(input) {
                initialValueOnCurrentInput = input.value;
            };

			// Fonction pour sauvegarder les valeurs des inputs de l'onglet actif
			function saveInputValues(tabId) {
				const inputs = document.querySelectorAll(`#${tabId} input[type="text"]`);

				inputs.forEach(input => {
					// Stocker la valeur de chaque input
					currentTabInputValues[input.name] = input.value;
				});
			}

			// Fonction pour restaurer les valeurs des inputs dans l'onglet actif
			function restoreInputValues(tabId) {
				const inputs = document.querySelectorAll(`#${tabId} input[type="text"]`);

				inputs.forEach(input => {
					if (currentTabInputValues[input.name] !== undefined) {
						input.value = currentTabInputValues[input.name]; // Restaurer la valeur si elle existe  
					}
				});
			}


            function openEditModal(attrName, objectAttribute) {
                defaultAttributeLabel = attrName;
                if (!document.getElementById('saveButton').disabled) {
                    alert("Opération impossible : il y a des modifications d'attributs en cours !");
                    return;
                }

                const newLabelInputField = document.getElementById('newLabel');
                newLabelInputField.value = objectAttribute.customWording || '';
                newLabelInputField.placeholder = defaultAttributeLabel;

                document.getElementById('jsValidation').value = objectAttribute.valueCheck || '';

                document.getElementById('attributeName').textContent = defaultAttributeLabel;

                $('#editModal').modal('show');
            }

            function checkInputFunction(input, attrName, objectAttribute, objectClassesDetails) {
                if (objectAttribute.valueCheck[0]) {
                    eval(objectAttribute.valueCheck[0]);
                    check(input, objectClassesDetails, initialValueOnCurrentInput);
                }
            }

            async function saveAttributNewLabel(objectClassesDetails) {
                const newLabel = document.getElementById('newLabel').value.trim();
                const newJsChecking = document.getElementById('jsValidation').value.trim();

                $('#editModal').modal('hide');

                const dn = (() => {
                    const urlSegments = window.location.pathname.split('/');
                    return urlSegments[urlSegments.length - 1];
                })();

                const dataToSend = {
                    dn: dn,
                    objectClassesDetails: objectClassesDetails,
                    [defaultAttributeLabel]: {
                        customWording: newLabel,
                        valueCheck: newJsChecking.trim() !== '' ? newJsChecking.trim() : null  
                    }
                };

                try {
                    const response = await fetch('/update-attributeCtl', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(dataToSend),
                    });

                    if (response.ok) {
                        let previousLabel = null;
                        objectClassesDetails.forEach(objectClass => {
                            Object.keys(objectClass).forEach(attr => {
                                if (attr === defaultAttributeLabel) {
                                    previousLabel = objectClass[attr].customWording;
                                    objectClass[attr].customWording = newLabel.length ? newLabel : null;
                                    objectClass[attr].valueCheck = newJsChecking.length ? newJsChecking : null;
                                }
                            });
                        });

						// Rafraichir la page et se repositionner sur l'onglet courant
						const activeTab = document.querySelector('.nav-link.active');
						const activeTabId = activeTab ? activeTab.id : null;
						if (activeTabId) {
							localStorage.setItem('activeTab', activeTabId);
						}

						// Rafraichir la page
						window.location.reload();

                    } else {
                        console.error('Erreur lors de la mise à jour de l\'attribut');
                        throw new Error('Erreur réseau, statut: ' + response.status);
                    }

                } catch (error) {
                    console.error('Erreur:', error);
                }

            }

            function changeModalSize(increase) {
                const modalDialog = document.querySelector('#editModal .modal-dialog');
                const currentClassList = modalDialog.classList;
                const jsValidationTextarea = document.getElementById('jsValidation');
                const greater = document.querySelector('.btn-light.btn-sm[onclick="changeModalSize(true)"]');
                const lower = document.querySelector('.btn-light.btn-sm[onclick="changeModalSize(false)"]');

                let currentSize = '';
                if (currentClassList.contains('modal-sm')) {
                    currentSize = 'sm';
                } else if (currentClassList.contains('modal-lg')) {
                    currentSize = 'lg';
                } else if (currentClassList.contains('modal-xl')) {
                    currentSize = 'xl';
                }

                lower.style.color = greater.style.color = 'black';
                if (increase) {
                    if (currentSize === 'sm') {
                        currentClassList.remove('modal-sm');
                        jsValidationTextarea.rows = 10;
                    } else if (currentSize === '') {
                        currentClassList.remove('modal-sm');
                        currentClassList.add('modal-lg');
                        jsValidationTextarea.rows = 15;
                    } else if (currentSize === 'lg') {
                        currentClassList.remove('modal-lg');
                        currentClassList.add('modal-xl');
                        jsValidationTextarea.rows = 20;
                        greater.style.color = '#ffffe0'; 
                        greater.blur(); 
                    }
                } else {
                    if (currentSize === 'xl') {
                        currentClassList.remove('modal-xl');
                        currentClassList.add('modal-lg');
                        jsValidationTextarea.rows = 15;
                    } else if (currentSize === 'lg') {
                        currentClassList.remove('modal-lg');
                        jsValidationTextarea.rows = 10;
                    } else if (currentSize === '') {
                        currentClassList.remove('modal-lg');
                        currentClassList.add('modal-sm');
                        jsValidationTextarea.rows = 5;
                        lower.style.color = '#ffffe0'; 
                        lower.blur(); 
                    }
                }
            }

            function checkSaveButton() {
                const inputs = document.querySelectorAll('.tab-pane input[type="text"]');
                let isAnyInputChanged = false;

                inputs.forEach(input => {
                    if (input.value !== input.defaultValue) {
                        isAnyInputChanged = true;
                    }
                });

                const saveButton = document.getElementById('saveButton');

                if (isAnyInputChanged) {
                    saveButton.disabled = false;
                    saveButton.classList.add('enabled');
                    saveButton.classList.remove('disabled');
                } else {
                    saveButton.disabled = true;
                    saveButton.classList.remove('enabled');
                    saveButton.classList.add('disabled');
                }
            }

            function restoreValues() {
                const activeTab = document.querySelector('.tab-pane.show');
                activeTab.querySelectorAll('input').forEach((field) => {
                    const initialValueOnCurrentInput = field.defaultValue;
                    field.value = initialValueOnCurrentInput;
                    checkSaveButton(field, initialValueOnCurrentInput);
                });
            }

			function exit() {
                window.location.href = '/search'; // Redirection vers la route '/search'
            }

            const tabs = document.querySelectorAll('#myTab .nav-link');
            tabs.forEach((tab) => {
                tab.addEventListener('click', () => {
                    const activeTab = document.querySelector('.tab-pane.show');
                    if (activeTab) {
                        activeTab.querySelectorAll('input').forEach((field) => {
                            checkSaveButton(field);
                        });
                    }

                    const newActiveTab = document.querySelector(tab.getAttribute('href'));
                    if (newActiveTab) {
                        newActiveTab.querySelectorAll('input').forEach((field) => {
                            checkSaveButton(field);
                        });
                    }
                });
            });

			// Gestion des événements de changement d'onglet  
			const navLinks = document.querySelectorAll('#myTab .nav-link');
				navLinks.forEach(link => {
				link.addEventListener('click', () => {
					// Récupérer l'onglet actif actuel  
					const currentTabId = document.querySelector('.tab-pane.show').id;
					// Sauvegarder les valeurs de l'onglet actuel
					saveInputValues(currentTabId);

					// Récupérer l'ID de l'onglet nouvellement sélectionné  
					const newTabId = link.getAttribute('href').substring(1);
					// Restaurer les valeurs dans le nouvel onglet  
					restoreInputValues(newTabId);
				});
			});

			// Fonction pour restaurer l'onglet actif après le rechargement
			window.onload = function() {
				const activeTabId = localStorage.getItem('activeTab');

				if (activeTabId) {
					const targetTab = document.getElementById(activeTabId);
					if (targetTab) {
						targetTab.click(); // Simule le clic sur l'onglet actif
					}
				}
			};

        </script>
    </div>
</body>
</html>
