<!DOCTYPE html>
<html lang="fr">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Carnet d'Annuaire</title>
	<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
	<style>
		html, body {
			height: 100%; /* S'assure que html et body prennent toute la hauteur */
			margin: 0; /* Enlève les marges par défaut */
		}
		body {
			/* background-color: #FFFCC4; */ /* Commenté, vous avez déjà un dégradé */
			background: linear-gradient(to bottom, #fff4b2, #d1c93b); /* Dégradé du jaune clair vers un jaune plus doux */
			min-height: 100vh; /* La hauteur minimale du corps est de 100% de la fenêtre */
		}
		.form-control::placeholder {
			color: #b0b0b0; /* Couleur du placeholder (gris clair) */
			opacity: 1; /* Assurez-vous que l'opacité est à 1 */
		}
		.nav-tabs .nav-item .nav-link {
			border: 1px solid #fff4b2; /* Bordure pour tous les onglets */
			border-bottom: none; /* Enlève la bordure inférieure pour tous les onglets */
			background-color: #B19F8C; /* Fond beige pour les onglets */
			border-radius: 5px 5px 0 0; /* Arrondir uniquement le haut des onglets */
			margin-right: -1px; /* Pour éviter que les bordures se chevauchent */
			color: #000000; /* Couleur du texte en noir */
		}
		.nav-tabs .nav-item .nav-link.active {
			border: 1px solid #000000; /* Bordure noire pour l'onglet actif */
			border-bottom: none; /* Retire la bordure inférieure de l'onglet actif */
			border-right: 2px solid #000000; /* Assure que la bordure droite est visible */
			background-color: #ffffe0; /* Fond clair pour l'onglet actif */
			color: #000000; /* Couleur du texte de l'onglet actif en noir */
			padding-top: 9px; /* Ajustez selon vos besoins */
		}
		.nav-tabs .nav-item .nav-link:not(.active) { /* Cibler spécifiquement les onglets non actifs */
			background-color: #D1C6A9; /* Fond beige clair pour l'onglet non actif */
			border-bottom: 1px solid #000000; /* Ajoute une bordure inférieure noire pour les onglets non actifs */
			color: #000000; /* Couleur du texte en noir */
		}
		.tab-content {
			background-color: #ffffe0; /* Fond jaune clair pour le contenu des onglets */
			padding: 15px; /* Ajout de padding pour l'intérieur des onglets */
			border: 1px solid #000000; /* Bordure noire pour le contenu des onglets */
			border-radius: 5px; /* Coins arrondis pour le contenu des onglets */
			margin-top: -1px; /* Pour ajuster la superposition de la bordure avec les onglets */
		}
		.edit-btn {
			background: transparent;
			border: none;
			cursor: pointer;
			color: #007bff; /* Couleur du bouton d'édition */
			padding: 0; /* Supprime le padding pour un bouton plus compact */
			font-size: 0.9em; /* Réduit la taille de la police pour le bouton */
			margin-left: 5px; /* Ajoute un espacement à gauche du bouton */
		}
		.edit-btn {
			font-size: 0.8em; /* Réduit la taille de l'icône */
		}
		.btn-restore {
			background-color: #FFE0B2; /* Couleur orange plus clair */
			border: 0px solid #F5F5DC; /* Bordure d'une teinte légèrement plus foncée */
			color: black; /* Couleur du texte en noir */
		}
		.btn-restore:hover {
			background-color: #FFA726; /* Couleur plus foncée au survol */
		}
		.btn-exit {
			background-color: #FFCC80; /* Couleur orange pastel */
			border: 0px solid #F5F5DC; /* Bordure d'une teinte légèrement plus foncée */
			color: black; /* Couleur du texte en black */
		}
		.btn-exit:hover {
			background-color: #FFA726; /* Couleur plus foncée au survol */
		}
		.btn-save {
			position: relative;
			background-color: #FFFFF0; /* Couleur beige pour le bouton */
			border: 0px solid #3A6A2A; /* Bordure vert foncé pour un meilleur contraste */
			color: #000; /* Couleur du texte par défaut */
		}
		.btn-save:hover {
			background-color: #E0E0E0; /* Couleur beige plus foncé au survol */
		}
		.btn-save.disabled:hover {
			background-color: #F5F5DC; /* Rétablir la couleur d'origine lorsqu'il est désactivé */
			cursor: not-allowed; /* Change le curseur pour indiquer que le bouton est désactivé */
		}
		.btn-save.enabled {
			color: #9B111E; /* Rouge rubis lorsqu'il est activé */
			background-color: #98FB98; /* Vert tendre lorsque activé */
		}
		.modal-content {
			background-color: #ffffe0; /* Fond jaune clair pour la modale */
			border-radius: 15px; /* Arrondir les angles de la fenêtre modale */
			box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2); /* Ajoute une ombre douce autour de la modale */
		}
		.custom-radio-group {
			display: flex;
			justify-content: space-between; /* Ecarte les boutons au maximum */
			width: 100%; /* S'assure que le conteneur prend toute la largeur disponible */
		}
		.form-check {
			flex: 1; /* Permet à chaque bouton de prendre une part égale de l'espace disponible */
			text-align: center; /* Centre le texte de chaque bouton */
		}
		.popup {
			position: absolute;
			background: white;
			border: 1px solid #ccc;
			width: 200px;
			max-height: 200px;
			overflow-y: auto;
			z-index: 1000;
			box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
		}
		.multi-values {
			flex: 1; /* Permet à l'input de remplir la largeur disponible */
			margin: 0; /* Supprime les marges pour un alignement parfait */
			/*margin-right: 5px;
			margin-left: 0px;*/
			padding: 8px; /* Espace intérieur pour un meilleur confort visuel */
			border: 1px solid #d3d3d3; /* Bordure grise */
			border-radius: 4px; /* Arrondi léger des coins */
			transition: border-color 0.3s; /* Transition douce pour les changements de couleur de bordure */
		}
		.multi-values::placeholder {
			color: #b0b0b0; /* Couleur du placeholder (gris plus clair) */
			opacity: 1; /* Assurez-vous que l'opacité est à 1 pour que la couleur soit bien visible */
		}
		.option {
			padding: 5px;
			cursor: pointer;
		}
		.option:hover, .option.selected {
			background-color: #e0e0e0; /* Couleur de surbrillance pour l'option sélectionnée */
		}
		.add-button {
			background-color: gray;
			color: white;
			border: none;
			padding: 5px 10px;
			cursor: pointer;
			border-radius: 5px;
		}
		.btn-delete {
			background-color: #dc3545; /* Rouge pour indiquer une action de suppression */
			color: white; /* Texte en blanc pour un bon contraste */
			border: none; /* Retirer la bordure par défaut */
			padding: 10px 15px; /* Espacement interne */
			cursor: pointer; /* Changer le curseur pour indiquer que c'est cliquable */
			border-radius: 5px; /* Coins arrondis */
			transition: background-color 0.3s; /* Animation de changement de couleur */
		}
		.btn-delete:hover {
			background-color: #c82333; /* Couleur plus foncée au survol */
		}
		.objectClassesContainer {
			display: flex; /* Utilisation de flexbox pour la mise en page */
			justify-content: space-between; /* Espace entre les colonnes */
			align-items: stretch; /* Alignement en haut des colonnes */
			height: calc(70vh - 100px); /* Hauteur fixe pour le conteneur */
		}
		.fixed-header {
			position: sticky; /* Rendre la position fixe quand on fait défiler */
			top: 0; /* Positionner en haut */
			background-color: #ffffe0; /* Fond blanc pour le titre */
			z-index: 10; /* Assurez-vous que le titre soit au-dessus du contenu */
			padding: 10px; /* Ajoute un peu de rembourrage */
			border-bottom: 1px solid #ccc; /* Optionnel : une bordure pour séparer du contenu */
		}
		.header-row {
			display: flex; /* Utiliser flexbox pour aligner les éléments en ligne */
			align-items: center; /* Centrer verticalement les éléments */
		}
		.header-row h4 {
			margin-right: 10px; /* Ajouter un peu d'espace entre le titre et le label */
		}
		.attribute-liste {
			margin-left: auto; /* Pousse cet élément vers la droite */
			text-align: right; /* Assurez-vous que le texte est aligné à droite */
		}
		.list {
			flex: 1; /* Permet aux listes de prendre une part égale de l'espace */
			overflow-y: auto; /* Activer le défilement si le contenu déborde */
			border: 1px solid #ccc; /* Bordure pour les listes */
			border-radius: 4px; /* Coins arrondis pour les listes */
			padding: 10px; /* Rembourrage intérieur */
			margin-top: 10px; /* Espace au-dessus des listes */
		}
		.list-item {
			margin: 5px 0;
			cursor: pointer;
			padding: 5px;
		}
		.list-item:hover {
			background-color: #f0f0f0;
		}
		.highlight {
			background-color: #ffeb3b; /* Couleur de surbrillance */
		}
		.placeholder {
			color: #888; /* Couleur grisée pour les messages d'instruction */
			font-style: italic; /* Italique pour le style */
			text-align: center; /* Centrer le texte */
			margin-top: 10px; /* Espace au-dessus du message */
		}
		.attributeList {
			position: sticky; /* L'élément reste fixe dans la fenêtre */
			top: 10px; /* Distance depuis le haut de la fenêtre */
			right: 20px; /* Distance depuis le bord droit de la fenêtre */
			width: 48%;
			max-height: 80vh; /* Hauteur maximale pour le défilement */
			overflow-y: auto; /* Activer le défilement si le contenu déborde */
			border: 1px solid #ccc;
			border-radius: 4px;
			padding: 10px;
			z-index: 10; /* Assurez-vous que l'élément est au-dessus des autres éléments */
		}
		.objectClassesCheckbox {
			margin-right: 10px; /* Ajustez la valeur pour plus ou moins d'espace */
		}
		h4 {
			margin: 0; /* Réinitialiser la marge */
			padding: 10px; /* Ajouter un peu de rembourrage pour le style */
			background-color: #fffacd; /* Couleur de fond pour les titres (jaune un peu plus foncé) */
			border-bottom: 1px solid #ccc; /* Bordure pour séparer le titre du contenu */
		}
		.blinking {
			animation: blink-animation 1s steps(5, start) infinite;
		}
		@keyframes blink-animation { /* Définition de l'animation */
			to {
				visibility: hidden; /* Cache l'élément à la fin de l'animation */
			}
		}
	</style>
</head>
<body>
	<div class="container mt-5 position-relative">
		<div style="display: flex;justify-content: space-between;align-items: center;padding: 10px;">
			<h1 title="LDAP Editor" style="margin: 0;">Carnet d'Annuaire</h1> <strong><span id="error" class="blinking" style="color: red;"></span></strong>
		</div>

		<!-- Formulaire principal -->
		<form id="mainForm" action="/edit/<%= dn %>" method="POST">

			<!-- Conteneur pour les boutons avec Flexbox -->
			<div class="d-flex justify-content-between mb-3">
				<div class="d-flex"> <!-- Boutons à gauche -->
					<button type="submit" id="saveButton" class="btn btn-save" style="width: 120px;" disabled>Valider</button>
					<button type="button" id="restoreButton" class="btn btn-restore" onclick="restoreValues()">Restaurer les valeurs</button>
					<button type="button" id="exitButton" class="btn btn-exit ml-2" style="width: 120px;" onclick="exit()">Retour</button>
				</div>

				<div class="d-flex"> <!-- Boutons à droite -->
					<button type="button" id="deleteButton" class="btn btn-delete ml-2" title='La totalité de cette entrée sera supprimée ...' onclick="deleteEntry()">Supprimer</button>
				</div>
			</div>

			<!-- Nav tabs -->
			<ul class="nav nav-tabs" id="myTab" role="tablist">
				<% objectClassesDetails.forEach((objectClass, objectClassIndex) => {
						const objName = objectClass.NAME[0];
						const description = objectClass.DESC ?? 'No description available';
					%>
					<li class="nav-item" title="<%= description %>">
						<a class="nav-link <%= objectClassIndex === 0 ? 'active' : '' %>"
							id="<%= objName %>-tab"
							data-toggle="tab"
							href="#<%= objName %>"
							role="tab"
							aria-controls="<%= objName %>"
							aria-selected="<%= objectClassIndex === 0 %>">
								<%= objName %>
							</a>
					</li>
				<% }) %>
				<li class="nav-item">
					<a class="nav-link" id="add-tab" data-toggle="tab" href="#add" role="tab" aria-controls="add" aria-selected="false" title="Add/remove objectClasses">+</a>
				</li>
			</ul>

			<!-- Tab panes -->
			<div class="tab-content" id="myTabContent">
				<% objectClassesDetails.forEach((objectClass, objectClassIndex) => {
					const objName = objectClass.NAME[0];
				%>
					<div class="tab-pane fade <%= objectClassIndex === 0 ? 'show active' : '' %>" id="<%= objName %>" role="tabpanel" aria-labelledby="<%= objName %>-tab">
						<input type="hidden" name="objectClass" value="<%= objName %>"/>
						<% ['MUST', 'MAY'].forEach(TYPE => { %>
							<h3 class="underline">Attributs <%= (TYPE === 'MUST' ?'obligatoires' :'optionnels') %> :</h3>
							<ul>
								<% objectClass[TYPE].forEach(currentAttr => {
									const attrName = currentAttr.NAME[0];
									const description = currentAttr.DESC ?? 'No description available';
								%>
								<li>
									<strong title="<%= description %>"><%= currentAttr.customWording || attrName %>:</strong>
									<button type="button" class="edit-btn" title="Edition des propriétés d'attributs" data-object-class-index='<%= objectClassIndex %>' onclick="openEditModal(this, '<%= attrName %>')">
										<i class="fas fa-pencil-alt"></i>
									</button>
										<!-- popupMultiValues -->
										<input type="text"
											name="<%= attrName %>"
											data-object-class-index = '<%= objectClassIndex %>'
											placeholder="Éditez ici les valeurs de l'attribut '<%= attrName %>'"
											oninput="checkInputFunction(this);"
											<% if (currentAttr.MULTI_VALUE === 'SINGLE-VALUE') { %>
												class="form-control field"
												value="<%= (Array.isArray(currentAttr.VALUES) ?currentAttr.VALUES[0] :currentAttr.VALUES) ?? '' %>"
											<% } else { %>
												class="multi-values form-control field"
												value="<%= JSON.stringify(Array.isArray(currentAttr.VALUES) ?currentAttr.VALUES :(currentAttr.VALUES != null ?[currentAttr.VALUES] :[])) %>"
											<% } %>
										/>
								</li>
								<% }) %>
							</ul>
						<% }) %>
					</div>
				<% }) %>

				<!-- Tab pour ajouter une nouvelle objectClass -->
				<div class="tab-pane fade" id="add" role="tabpanel" aria-labelledby="add-tab">
					<div class="sub-tabs">
						 <ul class="nav nav-tabs" id="subTab" role="tablist">
							 <li class="nav-item">
								 <a class="nav-link active" id="structural-tab" data-toggle="tab" href="#structural" role="tab" aria-controls="structural" aria-selected="true">ObjectClasses STRUCTURAL</a>
							 </li>
							 <li class="nav-item">
								 <a class="nav-link" id="auxiliary-tab" data-toggle="tab" href="#auxiliary" role="tab" aria-controls="auxiliary" aria-selected="false">ObjectClasses AUXILIARY</a>
							 </li>
						 </ul>

						 <!-- Contenu des sous-onglets -->
						 <div class="tab-content" id="subTabContent">
							 <div class="tab-pane fade show active" id="structural" role="tabpanel" aria-labelledby="structural-tab">
								 <div class="fixed-header">
									 <div class="header-row">
										 <h4>STRUCTURAL ObjectClasses</h4>
										 <h4 class="attribute-liste" name='attributeHeaders'>Attributs:</h4>
									 </div>
								 </div>
								 <div class="objectClassesContainer">
									 <div class="list" name="objectClassList">
										 <!-- La liste des objectClasses STRUCTURAL sera générée ici -->
									 </div>
									 <div class="list attributeList" name="attributeList">
										 <div id="attributePlaceholderStructural" name="placeHolder">
											 Cliquer sur un objectClass pour afficher les attributs ...
										 </div>
										 <!-- La liste des attributs sera affichée ici -->
									 </div>
								 </div>
							 </div>
							 <div class="tab-pane fade" id="auxiliary" role="tabpanel" aria-labelledby="auxiliary-tab">
								 <div class="fixed-header">
									 <div class="header-row">
										 <h4>AUXILIARY ObjectClasses</h4>
										 <h4 class="attribute-liste" name='attributeHeaders'>Attributs:</h4>
									 </div>
								 <div class="objectClassesContainer">
									 <div class="list" name="objectClassList">
										 <!-- La liste des objectClasses AUXILIARY sera générée ici -->
									 </div>
									 <div class="list attributeList" name="attributeList">
										 <div id="attributePlaceholderAuxiliary" name="placeHolder">
											 Cliquer sur un objectClass pour afficher les attributs ...
										 </div>
										 <!-- La liste des attributs sera affichée ici -->
									 </div>
								 </div>
							 </div>
						 </div>
					 </div>
				</div>
			</div>
		</form>

		<!-- Modale pour l'édition d'attributs -->
		<div class="modal fade" id="editModal" tabindex="-1" role="dialog" aria-labelledby="editModalLabel" aria-hidden="true">
			<div class="modal-dialog" role="document">
				<div class="modal-content">
					<form id="attrForm" action="/update-attributeCtl/<%= dn %>" method="POST">
						<div class="modal-header">
							<h5 class="modal-title" id="editModalLabel"><strong>Modifier le libellé d'attribut "<span id="attributeName"></span>"</strong></h5>
							<button type="button" class="close" data-dismiss="modal" aria-label="Fermer">
								<span aria-hidden="true">&times;</span>
							</button>
						</div>
						<div class="modal-body">
							<div class="form-group">
								<label for="newLabel"><strong>Libellé d'affichage de l'attribut :</strong></label>
								<input type="text" class="form-control" id="newLabel" name="newLabel" style='color:black;'>
							</div>
							<!-- Ajout des boutons radio -->
							<div class="form-group">
								<label><strong>Type d'attribut :</strong></label><br>
								<div class="custom-radio-group"> <!-- Container flex pour les boutons radio -->
									<div class="form-check">
										<input class="form-check-input" type="radio" name="attributeType" id="singleValue" value="SINGLE-VALUE">
										<label class="form-check-label" for="singleValue">SINGLE-VALUE</label>
									</div>
									<div class="form-check" hidden>
										<input class="form-check-input" type="radio" name="attributeType" id="schema" value="SCHEMA" disabled>
										<label class="form-check-label" for="schema">SCHEMA</label>
									</div>
									<div class="form-check">
										<input class="form-check-input" type="radio" name="attributeType" id="multiValue" value="MULTI-VALUE" checked>
										<label class="form-check-label" for="schema">MULTI-VALUES</label>
									</div>
								</div>
							</div>
							<div class="form-group">
								<label for="jsValidation"><strong>Code JS de contrôle de saisie :</strong></label>
								<textarea class="form-control" id="jsValidation" name="jsValidation" rows="10" placeholder="Saisissez le code JavaScript ici..."></textarea>
							</div>
							<input type="hidden" id="attributeId" name="attributeId"> <!-- Champ caché pour l'attributeName -->
						</div>
						<div class="modal-footer d-flex justify-content-between">
							<div>
								<button type="button" class="btn btn-light btn-sm" onclick="changeModalSize(false)" style="background-color: #ffffe0; border: none;"> &gt;&lt; </button>
								<button type="button" class="btn btn-light btn-sm" onclick="changeModalSize(true)" style="background-color: #ffffe0; border: none;"> &lt;&gt; </button>
							</div>
							<div>
								<button type="button" class="btn btn-secondary" data-dismiss="modal">Annuler</button>
								<button type="button" class="btn btn-primary" id="validerModale" onclick="submitModal(this)">Valider</button>
							</div>
						</div>
					</form>
				</div>
			</div>
		</div>

		<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
		<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
		<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
		<script src="/js/popupMultiValues.js"></script>
		<script>
const urlParams = new URLSearchParams(window.location.search);
const errMsg = urlParams.get('errMsg');
const objectClassesDetails = <%- JSON.stringify(objectClassesDetails) %>;
const ldapSchema = <%- JSON.stringify(ldapSchema) %>;
let reloadRequest = false;

function init() {
	objectClassesDetails.forEach(objectClass => { // Hidden les onglet DELETED
		if (!!objectClass.DELETED) {
			// Cacher l'onglet
			document.getElementById(objectClass.NAME[0] + '-tab').style.display="none";
			// Cacher le contenu de l'onglet
			document.getElementById(objectClass.NAME[0]).style.display="none";
		}
	});

	checkSaveButton();

	// Affichage d'un eventuel message transmis du serveur
	if (errMsg)	document.getElementById('error').textContent = errMsg;
}

function checkInputFunction(input) {
	if (!(input instanceof HTMLInputElement)) {
		console.error('L\'argument passé à checkInputFunction n\'est pas un élément input valide.');
		return;
	}

	let attrName = input.name;
	if (attrName) {
		const objectClassIndex = parseInt(input.dataset.objectClassIndex);
		const objectClass = objectClassesDetails[objectClassIndex];
		const objectAttribute = objectClass.MUST?.find(attr => attr.NAME.includes(attrName))
				|| objectClass.MAY?.find(attr => attr.NAME.includes(attrName));

		// Excution des scripts personnailisés sur la valeur en cours de saisie
		if (objectAttribute.valueCheck && objectAttribute.valueCheck[0]) {
			// Transmettre l'input de saisie ( ->id(name) ) pour les champs multi-values :
			const defaultValue = input.classList.contains('multi-values')
				?(safeJSONParse(input.getAttribute('data-default-value'))[input.getAttribute('data-index')] || '[]')
				:input.defaultValue;
			const currentValue = input.classList.contains('multi-values')
				?(safeJSONParse(input.getAttribute('data-value'))[input.getAttribute('data-index')] || '[]')
				:input.value;

			try { // lancement du script
				eval (objectAttribute.valueCheck[0]);
				check (document.getElementById(input.name) ?? input, objectClassesDetails, defaultValue, currentValue);
			} catch (error) {
				// Envoi du message d'erreur éventuel vers le client
				document.getElementById('error').textContent = 'Erreur de définition dans la fonction check() ...';
				setTimeout(() => {document.getElementById('error').textContent = '';}, 500);
			}

		// Mise à jour de l'attribut dans les autres onglets
		const allTabs = document.querySelectorAll('.tab-pane'); // Sélectionner tous les onglets
		allTabs.forEach(tab => {
			tab.querySelectorAll(`input[name="${attrName}"]`).forEach(field => {
				field.value = input.value;
			});
		});

		// Mise à jour de l'état du bouton de Validaion
		setTimeout(() => {checkSaveButton()}, 750);
		}
	}
}

// Rafraichir la page et se repositionner sur l'onglet courant
function restoreValues() {
	if (isDataChanged()) {
		if (!confirm("Des modifications sont en cours : êtes-vous sûr de vouloir les abandonner ?"))
			return;
	} else return;

	// Rafraichir la page
	saveCurrentTab();
	window.location.href = '/newEdit/<%= dn %>';
}

// Abandon de la page
function exit() {
	if (isDataChanged()
		&& !confirm("Des modifications sont en cours : êtes-vous sûr de vouloir quitter ?") )
			return;

	window.location.href = '/search'; // Redirection vers la route '/search'
}

async function deleteEntry() {
	if (confirm("Êtes-vous sûr de vouloir supprimer cette entrée ?")) {

		// Logique de suppression de l'entrée dn
		try {
			const response = await fetch("/delete/<%= dn %>", {
				method: 'POST',
					headers: {
					'Content-Type': 'application/json'
					}
			});

			const data = await response.json();

			if (response.ok) {
				alert(data.message); // Message de succès
				window.location.href = data.redirect; // Redirection vers /search
			} else {
				alert(`Erreur: ${data.error}`);
			}
		} catch (error) {
			console.error('Erreur:', error);
			alert('Erreur lors de la suppression de l\'élément.');
		}
	}
}

// Edition des propriétés d'attribut
function openEditModal(button, attrName) {
	const objectClassIndex = parseInt(button.dataset.objectClassIndex);
	const objectClass = objectClassesDetails[objectClassIndex];
	const objectAttribute = objectClass.MUST?.find(attr => attr.NAME.includes(attrName))
		|| objectClass.MAY?.find(attr => attr.NAME.includes(attrName));
	document.getElementById('validerModale').dataset.objectClassIndex = objectClassIndex;
	if (isDataChanged()) {
		alert("Opération impossible : il y a des modifications d'attributs en cours !");
		return;
	}

	// Label d'attribut
	const newLabelInputField = document.getElementById('newLabel');
	newLabelInputField.value = objectAttribute.customWording || '';
	newLabelInputField.placeholder = attrName;

	// Bontons radio SINGLE-VALUE/MULTI-VALUES:
	//	- OpenLDAP schema : not SINGLE-VALUE -> MULTI-VALUES,
	//	- this appli: can force SINGLE-VALUE.
	const radio = !!objectAttribute?.SINGLE_VALUE
			? 'singleValue'
			:(objectAttribute.MULTI_VALUE == null && objectAttribute.MULTI_VALUE !== 'SINGLE-VALUE')
				?'multiValue' :'singleValue';
	document.getElementById('multiValue').disabled = objectAttribute.SINGLE_VALUE;
	document.getElementById(radio).checked = true;
	document.getElementById('schema').disabled = true;

	// Script de vérification des saisies
	document.getElementById('jsValidation').value = objectAttribute.valueCheck || '';

	document.getElementById('attributeName').textContent = attrName;
	document.getElementById('attributeId').value = objectAttribute.OID; // Pour envoi par le formulaire lors de la soumission

	saveCurrentTab();
	$('#editModal').modal('show');
}


function submitModal(submitButton) {
	const attrName = document.getElementById('newLabel').placeholder;
	const multiValue = document.getElementById('multiValue').checked;
	const objectClassIndex = parseInt(submitButton.dataset.objectClassIndex);
	const objectClass = objectClassesDetails[objectClassIndex];
	const objectAttribute = objectClass.MUST?.find(attr => attr.NAME.includes(attrName))
		|| objectClass.MAY?.find(attr => attr.NAME.includes(attrName));
	const singleValue = !!objectAttribute.SINGLE_VALUE;
	if (singleValue || (!singleValue && multiValue))
		document.getElementById('schema').checked = !(document.getElementById('schema').disabled = false);
	document.getElementById('attrForm').submit();
}

function changeModalSize(increase) {
	const modalDialog = document.querySelector('#editModal .modal-dialog');
	const currentClassList = modalDialog.classList;
	const jsValidationTextarea = document.getElementById('jsValidation');
	const greater = document.querySelector('.btn-light.btn-sm[onclick="changeModalSize(true)"]');
	const lower = document.querySelector('.btn-light.btn-sm[onclick="changeModalSize(false)"]');

	let currentSize = '';
	if (currentClassList.contains('modal-sm')) {
		currentSize = 'sm';
	} else if (currentClassList.contains('modal-lg')) {
		currentSize = 'lg';
	} else if (currentClassList.contains('modal-xl')) {
		currentSize = 'xl';
	}

	lower.style.color = greater.style.color = 'black';
	if (increase) {
		if (currentSize === 'sm') {
			currentClassList.remove('modal-sm');
			jsValidationTextarea.rows = 10;
		} else if (currentSize === '') {
			currentClassList.remove('modal-sm');
			currentClassList.add('modal-lg');
			jsValidationTextarea.rows = 15;
		} else if (currentSize === 'lg') {
			currentClassList.remove('modal-lg');
			currentClassList.add('modal-xl');
			jsValidationTextarea.rows = 20;
			greater.style.color = '#ffffe0';
			greater.blur();
		}
	} else {
		if (currentSize === 'xl') {
			currentClassList.remove('modal-xl');
			currentClassList.add('modal-lg');
			jsValidationTextarea.rows = 15;
		} else if (currentSize === 'lg') {
			currentClassList.remove('modal-lg');
			jsValidationTextarea.rows = 10;
		} else if (currentSize === '') {
			currentClassList.remove('modal-lg');
			currentClassList.add('modal-sm');
			jsValidationTextarea.rows = 5;
			lower.style.color = '#ffffe0';
			lower.blur();
		}
	}
}

function safeJSONParse(val) {
	try{return JSON.parse(val);
	} catch(error) {
		// En cas d'erreur : retourne la valeur d'origine en string pour LDAP-JS
		return (typeof val !== 'string') ?JSON.stringify(val) :val;
}	}

function arraysEqualWithDuplicates(arr1, arr2) {
	if (arr1.length !== arr2.length)			return false;
	const arr2Copy = [...arr2]; // Copie de arr2
	for (let item of arr1) {
		const index = arr2Copy.indexOf(item);
		if (index === -1)						return false;
			arr2Copy.splice(index, 1); // Supprime l'élément à l'index trouvé
	}
	// Si arr2Copy est vide après le parcours de arr1, les tableaux sont égaux
	return arr2Copy.length === 0;
}

// Valide le bouton 'saveButton' seulement sur modification d'attributs
function isDataChanged() {
	// Sélectionne tous les inputs de type text et multi-values dans .tab-pane
	const inputs = document.querySelectorAll('.tab-pane input.field[type="text"]');
	const inputMap = {}; // Object pour stocker les inputs non clonés
	inputs.forEach(input => {
		if (input.name) inputMap[input.name] = input; // Garantir l'unicité des input.name traités
	});

	// Vérifier les changements attribut par attribut dans le masque
	const hasChanged = Object.values(inputMap).some(input => {
		const defaultValue = input.classList.contains('multi-values')
			?safeJSONParse(input.getAttribute('data-default-value') || '[]')
			:input.value;
		const currentValue = input.classList.contains('multi-values')
			?safeJSONParse(input.getAttribute('data-value') || '[]')
			:input.defaultValue;

if (input.name === 'telephoneNumber') {
console.log('\n');
console.log('checkInput input.name: ', input.name);
console.log('defaultValue: ', defaultValue);
console.log('currentValue: ', currentValue);
}

		return !arraysEqualWithDuplicates(defaultValue, currentValue);
	});

	// Vérifiez également s'il y a modification dans les objetsClasses
	const objClsModified = objectClassesDetails.some(item =>
		(!!item.DELETED && !item.ADDED) || (!!item.ADDED && !item.DELETED)
	);

	return hasChanged || objClsModified; // Retourne true si des changements ont été détectés
}

function areAllMUSTAttributesFilled() {
	const allMUSTAttributeNames = [...new Set(objectClassesDetails.flatMap(objectClass => 
		objectClass.MUST.map(attr => attr.NAME[0])
	))];

	return allMUSTAttributeNames.every(name => {
		const input = document.getElementsByName(name)[0];
		return (input.classList.contains('multi-values') ?safeJSONParse(input.getAttribute('data-value') || '[]') :input.value.trim()).length > 0;
	});
}

function checkSaveButton() {
	const allMUSTAttributesFilled = areAllMUSTAttributesFilled();
	const dataChanged = isDataChanged();
	const isButtonEnabled = allMUSTAttributesFilled && dataChanged;

	// Mise à jour de l'état du bouton 'saveButton'
	const saveButton = document.getElementById('saveButton');
	saveButton.title = allMUSTAttributesFilled ?(dataChanged ?'Des données ont été modifiées !' :'Aucune donnée n\'a encore été modifiée ...') :'Certains attributs obligatoires sont manquants !...';

	saveButton.disabled = !isButtonEnabled;
	saveButton.classList.toggle('enabled', isButtonEnabled);
	saveButton.classList.toggle('disabled', !isButtonEnabled);

	// Mise à jour de l'état du bouton 'restoreButton'
	const restoreButton = document.getElementById('restoreButton');
	restoreButton.title = dataChanged ?'Attention : certaines données ont été modifiées !' :'Aucune donnée n\'a encore été modifiée.';

	// Mise à jour de l'état du bouton 'restoreButton'
	const exitButton = document.getElementById('exitButton');
	exitButton.title = dataChanged ?'Attention : les modifications en cours seront perdues !' :'Retour à la recherche ...';
}

function objectClassesEdit(checkbox, objectClassName) {
	const tabContainer = document.querySelector('#myTab');
	const addTab = document.querySelector('#add-tab');

	// Sélectionner l'onglet correspondant à l'objectClass
	const tabLink = document.getElementById(objectClassName + '-tab');
	const tabPane = document.getElementById(objectClassName);

	let msg = 'Êtes-vous sûr de vouloir ' + (checkbox.checked ? 'ajouter' : 'supprimé')
		+ ' cet objetClass ' + (checkbox.checked ?'au' :'du') + ' DN en cours d\'édition ?'
		+ (checkbox.checked ?'' :'\n(certaines données seront probablement perdues ...)');

	if (checkbox.checked) {
		if (tabLink) {
			const objectClass = objectClassesDetails.find(item => item.NAME.includes(objectClassName)); 
			if (objectClass) delete objectClass.DELETED; // Positionner la propriété DELETED

			tabLink.style.display = "";	// Assurez-vous que l'onglet est visible
			tabPane.style.display = "";	// Assurez-vous que le contenu de l'onglet est visible
		} else {
			if (!confirm(msg)) {
				checkbox.checked = false;
				return;
			}
			objectClassesDetails.push({
				NAME: [objectClassName],
				ADD: true
			});

			// Submit() interceptable de mainForm
			reloadRequest = true;	// To allow the new attributes to be entered
			saveCurrentTab();
			document.getElementById('mainForm').dispatchEvent(new Event('submit', { cancelable: true })); // Déclenche l'événement de soumission 
		}
	} else {
		if (tabLink) {
			if (confirm(msg)) {
				// Supprimer l'onglet
				//tabPane.remove();
				tabLink.style.display = "none";	// Cacher l'onglet
 				tabPane.style.display = "none";	// Cacher le contenu de l'onglet

				// Marquer l'objectClass DELETED
				const objectClass = objectClassesDetails.find(item => item.NAME.includes(objectClassName)); 
				if (!!objectClass)
					objectClass.DELETED = true; // Positionner la propriété DELETED
			} else {
				checkbox.checked = true;
			}
		}
	}
	checkSaveButton();
}

function removeHiddenTabs() {
	// MArquer les inputs multi-values
	const inputs = document.getElementById('mainForm').querySelectorAll('input.multi-values');
	if (inputs.length>0) {
		Array.from(inputs).forEach(input => {
			if (document.getElementById(input.name)) input.name += "_multiValues";
		});
	}

	if (reloadRequest) { // Juste rafraichir la page pour l'affichage du new objectClass
		// Marquer les objectClasses ADDED/DELETED dans l'envoi du formulaire
		objectClassesDetails.forEach(objectClass => {
			if (!!objectClass.DELETED || !!objectClass.ADD) {
				const item = document.createElement('input');
				item.name = !!objectClass.DELETED ?'objectClass_Deleted' :'objectClass_Added';
				item.value = objectClass.NAME[0];
				item.type = 'hidden';
				mainForm.appendChild(item);
			}
		});
		
		// Marquer le formulaire pour un simple reload
		const item = document.createElement('input');
		item.name = 'reload';
		item.type = 'checkbox';
		item.hidden = true;
		item.checked = true;	// Passer l'info au formulaire
		mainForm.appendChild(item);
	} else { // Remove all hidden tabs before base update
		objectClassesDetails.forEach(objectClass => {
			if (!!objectClass.DELETED) {
				document.getElementById(objectClass.NAME[0] + '-tab').remove();
				document.getElementById(objectClass.NAME[0]).remove();
			}
		});

		// Mettre à jour les input.value des champs multi-values
		document.querySelectorAll('input.multi-values').forEach(input => {
			input.value = input.getAttribute('data-value');
		});
	}
}

// Gestion de la soumission du formulaire mainForm
const mainForn = document.getElementById('mainForm');
mainForn.addEventListener('submit', (event) => {
	removeHiddenTabs(); // Elimination des objectClasses deleted (onglets hidden)
	saveCurrentTab();
	mainForn.submit();
});
mainForm.addEventListener('keydown', (event) => {
	// Récupérer l'élément actif
	const activeElement = document.activeElement;

	// Vérifier si la touche pressée est 'Enter' et que le focus est sur le formulaire lui-même
	if (event.key === 'Enter' && !['TEXTAREA'].includes(activeElement.tagName)) {
		event.preventDefault(); // Empêche la soumission du formulaire
	}
});

// Sauvegarder la position de l'onglet courant
function saveCurrentTab(){
	let activeTab;
	['myTab', 'add'].forEach(tabsId => {
		activeTab = document.getElementById(tabsId).querySelector('.nav-link.active');
		if (activeTab && activeTab.id) localStorage.setItem(tabsId === 'myTab' ?'activeObjectClassTab' :'activeObjectClassAddTab', activeTab.id);
	});
}

// Retablir la position sur le tab ADD/REMOVE objectClasses
document.getElementById('add-tab').addEventListener('click', function(event) {
	let activeTabId = localStorage.getItem('activeObjectClassAddTab');
	if (!activeTabId) {
		activeTabId = document.getElementById('add').querySelectorAll('.nav-link')[0].id;
		document.getElementById(activeTabId).click();
	}
});
// Ajout des gestionnaires d'événements pour ses deux sous-onglets
document.querySelectorAll('#add .nav-link').forEach(link => {
	link.addEventListener('click', function(event) {
		saveCurrentTab(); // Appelle la fonction pour sauvegarder l'onglet actif
	});
});

// Fonction pour restaurer la position sur l'onglet actif après le rechargement page
window.onload = function() {
	const activeTabId = localStorage.getItem('activeObjectClassTab')
		|| document.getElementById('myTab').querySelectorAll('.nav-link')[0].id;
	document.getElementById(activeTabId).click(); // Simule le clic sur l'onglet actif
};

// AFFICHAGE de l'onglet "+"
const objectClassLists = Array.from(document.getElementsByName('objectClassList'));
const attributeLists = Array.from(document.getElementsByName('attributeList'));
const attributePlaceholders = Array.from(document.getElementsByName('placeHolder'));
const attributeHeaders = Array.from(document.getElementsByName('attributeHeaders'));

// Assurez-vous que les sélections sont valides
if (objectClassLists.length < 2 || attributeLists.length < 2 || attributePlaceholders.length < 2) {
	console.error('Schéma HTML insuffisant pour lister les objectClasses et les attributs.');
} else {
	// Créer un tableau des types d'objectClasses
	const objectClassTypes = [
		{ type: 'STRUCTURAL', objectClassList: objectClassLists[0], attributeList: attributeLists[0], attributePlaceholder: attributePlaceholders[0], attributeHeaders: attributeHeaders[0] },
		{ type: 'AUXILIARY', objectClassList: objectClassLists[1], attributeList: attributeLists[1], attributePlaceholder: attributePlaceholders[1], attributeHeaders: attributeHeaders[1] }
	];

	// Remplir la liste des objectClasses
	ldapSchema.objectClasses.forEach((objectClass) => {
		const objectClassInfo = objectClassTypes.find(cls => cls.type === objectClass.TYPE);
		
		// Vérifier si le type d'objectClass est trouvé
		if (!objectClassInfo) return;

		const { objectClassList, attributeList, attributePlaceholder, attributeHeaders } = objectClassInfo;

		// Créer un élément de la liste des objectClasses
		const listItem = document.createElement('div');
		listItem.className = 'list-item';

		// Vérifier si l'objectClass est présent dans objectClassesDetails
		const isChecked = objectClass && 
			objectClassesDetails.some(detail => 
				detail.NAME.includes(objectClass.NAME[0]) && !detail.DELETED
			);

		// Créer la case à cocher
		const checkbox = document.createElement('input');
		checkbox.type = 'checkbox';
		checkbox.className = 'checkbox objectClassesCheckbox';
		checkbox.checked = isChecked;

		// Ajouter la case à cocher et le nom de l'ObjectClass dans l'élément de liste
		listItem.appendChild(checkbox);
		listItem.appendChild(document.createTextNode(objectClass.NAME[0]));
		listItem.title = objectClass.DESC || "Pas de description disponible";

		// Événement de clic pour gérer l'état de la case à cocher
		checkbox.addEventListener('click', function(event) {
			event.stopPropagation(); // Empêche la propagation du clic pour ne pas déclencher la surbrillance
			objectClassesEdit(checkbox, objectClass.NAME[0]);
		});

		// Événement de clic pour mettre en surbrillance l'objectClass et afficher les attributs
		listItem.addEventListener('click', function() {
			// Vérifiez si l'item est déjà surligné
			const isHighlighted = listItem.classList.toggle('highlight');

			// Supprimer la surbrillance des autres éléments
			Array.from(objectClassList.getElementsByClassName('highlight')).forEach(item => {
				if (item !== listItem) {
					item.classList.remove('highlight');
				}
			});

			// Remplir la liste des attributs si l'item est surligné
			if (isHighlighted) {
				fillAttributeList(objectClass, attributeList, attributePlaceholder, attributeHeaders);
			} else {
				attributeHeaders.innerHTML = `Attributs':`;
				attributePlaceholder.innerText = 'Cliquer sur un objectClass pour afficher ses attributs ...';
				attributeList.innerHTML = ''; // Vider la liste des attributs
				attributeList.appendChild(attributePlaceholder); // Réafficher le placeholder
			}
		});
		objectClassList.appendChild(listItem);
	});
}

// Fonction pour remplir la liste des attributs
function fillAttributeList(objectClass, attributeList, attributePlaceholder, attributeHeaders) {
	let hasAttributes = false;

	// Vider la liste des attributs
	attributeList.innerHTML = '';
	attributeList.appendChild(attributePlaceholder);

	// Ajouter les attributs MUST et MAY correspondants
	['MUST', 'MAY'].forEach(key => {
		if (objectClass[key]) {
			objectClass[key].forEach(attrName => {
				const attrItem = document.createElement('div');
				const attribute = ldapSchema.attributes.find(attr => attr.NAME.includes(attrName));
				attrItem.className = 'list-item';
				attrItem.innerText = `${attrName} (${key})`; // Le nom de l'attribut
				attrItem.title = attribute?.DESC || 'Aucune description disponible.';
				attributeList.appendChild(attrItem);
				hasAttributes = true; // Indiquer qu'il y a des attributs
			});
			// Mettre à jour l'en-tête
			attributeHeaders.innerHTML = `Attributs de '<strong>${objectClass.NAME[0]}</strong>':`;
		}
	});
	
	// Mettre à jour le placeholder
	attributePlaceholder.innerText = hasAttributes ? '' : 'Aucun attribut pour cet objectClass.';
}

// Appel de la fonction pour init à la fin du chargement du DOM
document.addEventListener('DOMContentLoaded', init);
		</script>
	</div>
</body>
</html>
