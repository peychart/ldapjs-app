<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Carnet d'Annuaire</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        html, body {
            height: 100%; /* S'assure que html et body prennent toute la hauteur */
            margin: 0; /* Enlève les marges par défaut */
        }
        body {
            /* background-color: #FFFCC4; */ /* Commenté, vous avez déjà un dégradé */
            background: linear-gradient(to bottom, #fff4b2, #d1c93b); /* Dégradé du jaune clair vers un jaune plus doux */
            min-height: 100vh; /* La hauteur minimale du corps est de 100% de la fenêtre */
        }
        .form-control::placeholder {
            color: #b0b0b0; /* Couleur du placeholder (gris clair) */
            opacity: 1; /* Assurez-vous que l'opacité est à 1 */
        }
        .nav-tabs .nav-item .nav-link {
            border: 1px solid #fff4b2; /* Bordure pour tous les onglets */
            border-bottom: none; /* Enlève la bordure inférieure pour tous les onglets */
            background-color: #B19F8C; /* Fond beige pour les onglets */
            border-radius: 5px 5px 0 0; /* Arrondir uniquement le haut des onglets */
            margin-right: -1px; /* Pour éviter que les bordures se chevauchent */
            color: #000000; /* Couleur du texte en noir */
        }
        .nav-tabs .nav-item .nav-link.active {
            border: 1px solid #000000; /* Bordure noire pour l'onglet actif */
            border-bottom: none; /* Retire la bordure inférieure de l'onglet actif */
            border-right: 2px solid #000000; /* Assure que la bordure droite est visible */
            background-color: #ffffe0; /* Fond clair pour l'onglet actif */
            color: #000000; /* Couleur du texte de l'onglet actif en noir */
            padding-top: 9px; /* Ajustez selon vos besoins */
        }
        .nav-tabs .nav-item .nav-link:not(.active) { /* Cibler spécifiquement les onglets non actifs */
            background-color: #D1C6A9; /* Fond beige clair pour l'onglet non actif */
            border-bottom: 1px solid #000000; /* Ajoute une bordure inférieure noire pour les onglets non actifs */
            color: #000000; /* Couleur du texte en noir */
        }
        .tab-content {
            background-color: #ffffe0; /* Fond jaune clair pour le contenu des onglets */
            padding: 15px; /* Ajout de padding pour l'intérieur des onglets */
            border: 1px solid #000000; /* Bordure noire pour le contenu des onglets */
            border-radius: 5px; /* Coins arrondis pour le contenu des onglets */
            margin-top: -1px; /* Pour ajuster la superposition de la bordure avec les onglets */
        }
        .edit-btn {
            background: none;
            border: none;
            cursor: pointer;
            color: #007bff; /* Couleur du bouton d'édition */
            padding: 0; /* Supprime le padding pour un bouton plus compact */
            font-size: 0.9em; /* Réduit la taille de la police pour le bouton */
        }
        .edit-btn i {
            font-size: 0.8em; /* Réduit la taille de l'icône */
        }
        .btn-restore {
            background-color: #FFE0B2; /* Couleur orange plus clair */
            border: 0px solid #F5F5DC; /* Bordure d'une teinte légèrement plus foncée */
            color: black; /* Couleur du texte en noir */
        }
        .btn-restore:hover {
            background-color: #FFA726; /* Couleur plus foncée au survol */
        }
        .btn-exit {
            background-color: #FFCC80; /* Couleur orange pastel */
            border: 0px solid #F5F5DC; /* Bordure d'une teinte légèrement plus foncée */
            color: black; /* Couleur du texte en black */
        }
        .btn-exit:hover {
            background-color: #FFA726; /* Couleur plus foncée au survol */
        }
        .btn-save {
            position: relative;
            background-color: #FFFFF0; /* Couleur beige pour le bouton */
            border: 0px solid #3A6A2A; /* Bordure vert foncé pour un meilleur contraste */
            color: #000; /* Couleur du texte par défaut */
        }
        .btn-save:hover {
            background-color: #E0E0E0; /* Couleur beige plus foncé au survol */
        }
        .btn-save.disabled:hover {
            background-color: #F5F5DC; /* Rétablir la couleur d'origine lorsqu'il est désactivé */
            cursor: not-allowed; /* Change le curseur pour indiquer que le bouton est désactivé */
        }
        .btn-save.enabled {
            color: #9B111E; /* Rouge rubis lorsqu'il est activé */
            background-color: #98FB98; /* Vert tendre lorsque activé */
        }
        .modal-content {
            background-color: #ffffe0; /* Fond jaune clair pour la modale */
            border-radius: 15px; /* Arrondir les angles de la fenêtre modale */
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2); /* Ajoute une ombre douce autour de la modale */
        }
		.custom-radio-group {
            display: flex;
            justify-content: space-between; /* Ecarte les boutons au maximum */
            width: 100%; /* S'assure que le conteneur prend toute la largeur disponible */
        }
        .form-check {
            flex: 1; /* Permet à chaque bouton de prendre une part égale de l'espace disponible */
            text-align: center; /* Centre le texte de chaque bouton */
        }
        .popup {
            position: absolute;
            background: white;
            border: 1px solid #ccc;
            width: 200px;
            max-height: 200px;
            overflow-y: auto;
            z-index: 1000;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        .editInput {
            flex: 1; /* Permet à l'input de remplir la largeur disponible */
            margin: 0; /* Supprime les marges pour un alignement parfait */
            /*margin-right: 5px;
            margin-left: 0px;*/
            padding: 8px; /* Espace intérieur pour un meilleur confort visuel */
            border: 1px solid #d3d3d3; /* Bordure grise */
            border-radius: 4px; /* Arrondi léger des coins */
            transition: border-color 0.3s; /* Transition douce pour les changements de couleur de bordure */
        }
        .editInput::placeholder {
            color: #b0b0b0; /* Couleur du placeholder (gris plus clair) */
            opacity: 1; /* Assurez-vous que l'opacité est à 1 pour que la couleur soit bien visible */
        }
        .option {
            padding: 5px;
            cursor: pointer;
        }
        .option:hover, .option.selected {
            background-color: #e0e0e0; /* Couleur de surbrillance pour l'option sélectionnée */
        }
        .add-button {
            background-color: green;
            color: white;
            border: none;
            padding: 5px 10px;
            cursor: pointer;
            border-radius: 5px;
        }
    </style>
</head>
<body>
    <div class="container mt-5 position-relative">
        <h1>Carnet d'Annuaire</h1>

        <!-- Formulaire principal -->
        <form id="mainForm" action="/edit/<%= dn %>" method="POST">

            <!-- Conteneur pour les boutons avec Flexbox -->
            <div class="d-flex justify-content-end mb-3">
                <button type="button" id="restoreButton" class="btn btn-restore" onclick="restoreValues()">Restaurer les valeurs</button>
                <button type="button" id="exitButton" class="btn btn-exit ml-2" style="width: 120px;" onclick="exit()">Exit</button>
                <button type="submit" id="saveButton" class="btn btn-save" style="width: 120px;" disabled>Valider</button>
            </div>

            <!-- Nav tabs -->
            <ul class="nav nav-tabs" id="myTab" role="tablist">
                <% objectClassesDetails.forEach((objectClass, objectClassIndex) => { %>
                    <li class="nav-item">
                        <a class="nav-link <%= objectClassIndex === 0 ? 'active' : '' %>" id="<%= objectClass.NAME %>-tab" data-toggle="tab" href="#<%= objectClass.NAME %>" role="tab" aria-controls="<%= objectClass.NAME %>" aria-selected="<%= objectClassIndex === 0 %>"><%= objectClass.NAME %></a>
                    </li>
                <% }) %>
                <li class="nav-item">
                    <a class="nav-link" id="add-tab" data-toggle="tab" href="#add" role="tab" aria-controls="add" aria-selected="false">+</a>
                </li>
            </ul>

            <!-- Tab panes -->
            <div class="tab-content" id="myTabContent">
                <% objectClassesDetails.forEach((objectClass, objectClassIndex) => { %>
                    <div class="tab-pane fade <%= objectClassIndex === 0 ? 'show active' : '' %>" id="<%= objectClass.NAME %>" role="tabpanel" aria-labelledby="<%= objectClass.NAME %>-tab">
                        <% ['MUST', 'MAY'].forEach(type => { %>
                            <h3 class="underline">Attributs <%= (type === 'MUST' ?'obligatoires' :'optionnels') %> :</h3>
                            <ul>
                                <% if (objectClass.ATTRIBUTE) Object.keys(objectClass.ATTRIBUTE).forEach(attrName => {
                                    if (objectClass.ATTRIBUTE[attrName].type === type) {
                                        const objectAttribute = objectClass.ATTRIBUTE[attrName];
                                        const displayLabel = objectAttribute.customWording || attrName;
                                %>
                                <li>
                                    <strong><%= displayLabel %>:</strong>
                                    <button type="button" class="edit-btn" data-object-class-index='<%= objectClassIndex %>' onclick="openEditModal(this, '<%= attrName %>')">
                                        <i class="fas fa-pencil-alt"></i>
                                    </button>
                                    <% if (objectAttribute.values && Array.isArray(objectAttribute.values)) { %>
                                        <!-- popupMultiValues -->
                                        <div class="popupContainer" data-attr-name="<%= attrName %>">
                                            <div class="container" style="display: flex; width: 100%; padding: 0; margin: 0;">
                                                <input type="text"
                                                    class="editInput"
                                                    data-object-class-index = '<%= objectClassIndex %>'
                                                    placeholder="Éditez ici les valeurs  de l'attribut '<%= attrName %>'"
                                                    oninput="checkSaveButton();
                                                             checkInputFunction(this, '<%= attrName %>');
                                                        " />
                                                <!-- Champ caché pour soumettre les valeurs au formulaire -->
                                                <input type="hidden"
                                                    id="<%= attrName %>"
                                                    class="hiddenInput"
                                                    name="<%= attrName %>"
                                                    value="<%= objectAttribute.values ?JSON.stringify(objectAttribute.values) :[] %>">
                                                <!-- Bouton d'ajout d'une valeur à l'attribut -->
                                                <button type="button" class="add-button">+</button>
                                            </div>
                                            <div class="popup" style="display: none;"></div> <!-- Initialisation des options -->
                                        </div>
                                    <% } else { %>
                                        <input type="text"
                                            name="<%= attrName %>"
                                            value="<%= objectAttribute.values || '' %>"
                                            class="form-control"
                                            data-object-class-index = '<%= objectClassIndex %>'
                                            placeholder="Éditez ici la valeur de l'attribut '<%= attrName %>'"
                                            oninput="checkSaveButton();
                                                     checkInputFunction(this, '<%= attrName %>');
                                                " />
                                    <% } %>
                                </li>
                                <% } }) %>
                            </ul>
                        <% }) %>
                    </div>
                <% }) %>

                <!-- Tab pour ajouter une nouvelle objectClass -->
                <div class="tab-pane fade" id="add" role="tabpanel" aria-labelledby="add-tab">
                    <h3>Ajouter une nouvelle objectClass</h3>
                    <div class="form-group">
                        <label for="objectClassName">Nom de l'objectClass</label>
                        <input type="text" id="objectClassName" name="objectClassName" class="form-control">
                    </div>
                    <div class="form-group">
                        <label for="attributes">Attributs (JSON)</label>
                        <textarea id="attributes" name="attributes" class="form-control" rows="5" placeholder='{"MUST": [], "MAY": []}'></textarea>
                    </div>
                </div>
            </div>
        </form>

        <!-- Modale pour l'édition d'attributs -->
        <div class="modal fade" id="editModal" tabindex="-1" role="dialog" aria-labelledby="editModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <form id="attrForm" action="/update-attributeCtl/<%= dn  %>" method="POST">
                        <div class="modal-header">
                            <h5 class="modal-title" id="editModalLabel"><strong>Modifier le libellé d'attribut "<span id="attributeName"></span>"</strong></h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Fermer">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <div class="form-group">
                                <label for="newLabel"><strong>Libellé d'affichage de l'attribut :</strong></label>
                                <input type="text" class="form-control" id="newLabel" name="newLabel" style='color:black;'>
                            </div>
                            <!-- Ajout des boutons radio -->
                            <div class="form-group">
                                <label><strong>Type d'attribut :</strong></label><br>
                                <div class="custom-radio-group"> <!-- Container flex pour les boutons radio -->
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="attributeType" id="singleValue" value="SINGLE-VALUE">
                                        <label class="form-check-label" for="singleValue">SINGLE-VALUE</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="attributeType" id="schema" value="SCHEMA" checked>
                                        <label class="form-check-label" for="schema">cf. SCHEMA</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="attributeType" id="multiValue" value="MULTI-VALUE">
                                        <label class="form-check-label" for="multiValue">MULTI-VALUE</label>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group">
                                <label for="jsValidation"><strong>Code JS de contrôle de saisie :</strong></label>
                                <textarea class="form-control" id="jsValidation" name="jsValidation" rows="10" placeholder="Saisissez le code JavaScript ici..."></textarea>
                            </div>
                            <input type="hidden" id="attributeId" name="attributeId"> <!-- Champ caché pour l'attributeName -->
                        </div>
                        <div class="modal-footer d-flex justify-content-between">
                            <div>
                                <button type="button" class="btn btn-light btn-sm" onclick="changeModalSize(false)" style="background-color: #ffffe0; border: none;"> &gt;&lt; </button>
                                <button type="button" class="btn btn-light btn-sm" onclick="changeModalSize(true)" style="background-color: #ffffe0; border: none;"> &lt;&gt; </button>
                            </div>
                            <div>
                                <button type="button" class="btn btn-secondary" data-dismiss="modal">Annuler</button>
                                <button type="submit" class="btn btn-primary">Valider</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
        <script src="/js/popupMultiValues.js"></script>
        <script>
			let objectClassesDetails = <%- JSON.stringify(objectClassesDetails) %>;
			const currentTabInputValues = {};

            function checkInputFunction(input, attrName) {
				const objectClassIndex = parseInt(input.dataset.objectClassIndex);
				const objectAttribute = objectClassesDetails[objectClassIndex].ATTRIBUTE[attrName];
                if (objectAttribute.valueCheck[0]) {
                    eval(objectAttribute.valueCheck[0]);
                    check(input, objectClassesDetails, input.defaultValue);
                }
            }

			// Fonction pour sauvegarder les valeurs des inputs de l'onglet actif
			function saveInputValues(tabId) {
				const inputs = document.querySelectorAll(`#${tabId} input[type="text"], #${tabId} input[type="hidden"]`);

				inputs.forEach(input => {
					// Stocker la valeur de chaque input
					if (input.name)
						currentTabInputValues[input.name] = input.value;
				});
			}

			// Fonction pour restaurer les valeurs des inputs dans l'onglet actif
			function restoreInputValues(tabId) {
				const inputs = document.querySelectorAll(`#${tabId} input[type="text"], #${tabId} input[type="hidden"]`);

				inputs.forEach(input => {
					if (input.name && currentTabInputValues[input.name] !== undefined) {
						input.value = currentTabInputValues[input.name]; // Restaurer la valeur si elle existe  
					}
				});
			}

			function validateMainForm() {
				alert ("Désolé : fonction en cours d'implémentation ...");
				return true;
//				return false;

/*				// Exemple de validation : vérifier si l'email est valide
				const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/; // Expression régulière pour valider un email
				if (!emailPattern.test(email)) {
					errorMessage.innerText = 'Veuillez entrer une adresse email valide.';
					return false; // Empêche l'envoi du formulaire
				}

		// Côté serveur :
				// DN de l'entrée à modifier
				const dn = 'cn=John Doe,dc=example,dc=com';

				// Modifications à apporter  
				const changes = [
					{ operation: 'replace', modification: { mail: 'john.doe@example.com' } },
					{ operation: 'add', modification: { telephoneNumber: '+123456789' } },
					{ operation: 'delete', modification: { description: '' } }
				];

				// Effectuer les modifications  
				changes.forEach(change => {
					client.modify(dn, change, (err) => {
						if (err) {
							console.error(`Erreur lors de la modification ${change.operation} :`, err);
						} else {
							console.log(`Modification ${change.operation} effectuée avec succès.`);
						}
					});
				});
*/
			}

            function restoreValues() {
				// Rafraichir la page et se repositionner sur l'onglet courant
				const activeTab = document.querySelector('.nav-link.active');
				const activeTabId = activeTab ? activeTab.id : null;
				if (activeTabId) {
					localStorage.setItem('activeTab', activeTabId);
				}

				// Rafraichir la page
				window.location.reload();
            }

			function exit() {
                if (!document.getElementById('saveButton').disabled
					&& !confirm("Des modifications sont en cours : êtes-vous sûr de vouloir quitter ?") )
						return;

                window.location.href = '/search'; // Redirection vers la route '/search'
            }

            function openEditModal(button, attrName) {
				const objectClassIndex = parseInt(button.dataset.objectClassIndex);
				const objectAttribute = objectClassesDetails[objectClassIndex].ATTRIBUTE[attrName];
                if (!document.getElementById('saveButton').disabled) {
                    alert("Opération impossible : il y a des modifications d'attributs en cours !");
                    return;
                }

                const newLabelInputField = document.getElementById('newLabel');
                newLabelInputField.value = objectAttribute.customWording || '';
                newLabelInputField.placeholder = attrName;

				const radio = (objectAttribute.MULTIVALUE === undefined) ?'schema' : (objectAttribute.MULTIVALUE ?'multiValue' :'singleValue');
				document.getElementById(radio).checked = true;

                document.getElementById('jsValidation').value = objectAttribute.valueCheck || '';

                document.getElementById('attributeName').textContent = attrName;
				document.getElementById('attributeId').value = attrName; // Pour envoi par le formulaire

                $('#editModal').modal('show');
            }

            function changeModalSize(increase) {
                const modalDialog = document.querySelector('#editModal .modal-dialog');
                const currentClassList = modalDialog.classList;
                const jsValidationTextarea = document.getElementById('jsValidation');
                const greater = document.querySelector('.btn-light.btn-sm[onclick="changeModalSize(true)"]');
                const lower = document.querySelector('.btn-light.btn-sm[onclick="changeModalSize(false)"]');

                let currentSize = '';
                if (currentClassList.contains('modal-sm')) {
                    currentSize = 'sm';
                } else if (currentClassList.contains('modal-lg')) {
                    currentSize = 'lg';
                } else if (currentClassList.contains('modal-xl')) {
                    currentSize = 'xl';
                }

                lower.style.color = greater.style.color = 'black';
                if (increase) {
                    if (currentSize === 'sm') {
                        currentClassList.remove('modal-sm');
                        jsValidationTextarea.rows = 10;
                    } else if (currentSize === '') {
                        currentClassList.remove('modal-sm');
                        currentClassList.add('modal-lg');
                        jsValidationTextarea.rows = 15;
                    } else if (currentSize === 'lg') {
                        currentClassList.remove('modal-lg');
                        currentClassList.add('modal-xl');
                        jsValidationTextarea.rows = 20;
                        greater.style.color = '#ffffe0'; 
                        greater.blur(); 
                    }
                } else {
                    if (currentSize === 'xl') {
                        currentClassList.remove('modal-xl');
                        currentClassList.add('modal-lg');
                        jsValidationTextarea.rows = 15;
                    } else if (currentSize === 'lg') {
                        currentClassList.remove('modal-lg');
                        jsValidationTextarea.rows = 10;
                    } else if (currentSize === '') {
                        currentClassList.remove('modal-lg');
                        currentClassList.add('modal-sm');
                        jsValidationTextarea.rows = 5;
                        lower.style.color = '#ffffe0'; 
                        lower.blur(); 
                    }
                }
            }

			// Valide le bouton seulement sur modifications
            function checkSaveButton() {
                const inputs = document.querySelectorAll('.tab-pane input[type="text"], .tab-pane input[type="hidden"]');
                let isAnyInputChanged = false;

                inputs.forEach(input => {
					if (input.name) {
						if (input.value !== input.defaultValue) {
							isAnyInputChanged = true;
/*console.log('\ninput.name: ', input.name);
//console.log('input.value: ', input.value);
//console.log('input.defaultValue: ', input.defaultValue);*/
						}
					}
               	});

                const saveButton = document.getElementById('saveButton');

                if (isAnyInputChanged) {
                    saveButton.disabled = false;
                    saveButton.classList.add('enabled');
                    saveButton.classList.remove('disabled');
                } else {
                    saveButton.disabled = true;
                    saveButton.classList.remove('enabled');
                    saveButton.classList.add('disabled');
                }
            }

			// Mise à jour de l'état du bouton de validation du Main formulaire
            const tabs = document.querySelectorAll('#myTab .nav-link');
            tabs.forEach((tab) => {
                tab.addEventListener('click', () => {
                    const activeTab = document.querySelector('.tab-pane.show');
                    if (activeTab) {
                        activeTab.querySelectorAll('input').forEach((field) => {
                            checkSaveButton(field);
                        });
                    }

                    const newActiveTab = document.querySelector(tab.getAttribute('href'));
                    if (newActiveTab) {
                        newActiveTab.querySelectorAll('input').forEach((field) => {
                            checkSaveButton(field);
                        });
                    }
                });
            });

			// Synchronisation des inputs inter-onglets
			function handleTabValues(All=true) {
				// Récupérer l'onglet actif actuel
				const currentTab = document.querySelector('.tab-pane.show');
				if (currentTab) {
					// Sauvegarder les valeurs de l'onglet actuel
					saveInputValues(currentTab.id);
				
/*					if (!all) {
						// Récupérer l'ID de l'onglet nouvellement sélectionné
						const newTabId = document.querySelector('.nav-link.active').getAttribute('href').substring(1);
						// Restaurer les valeurs dans le nouvel onglet
						restoreInputValues(newTabId);
                    } else {*/
						const allTabs = document.querySelectorAll('.tab-pane'); // Sélectionner tous les onglets
						allTabs.forEach(tab => {
							restoreInputValues(tab.id); // Restaurer les valeurs pour cet onglet
						});
//					}
				}
			}

			function handleInputChange(input) {
//console.clear();
console.log('changement sur : ', input.name);
            }

			// Gestion du changement d'un input formulaire
			const inputs = document.querySelectorAll('#mainForm input');
			// Ajoutez un écouteur d'événements à chaque champ d'entrée  
			inputs.forEach(inputField => {
				inputField.addEventListener('input', () => handleInputChange(inputField));

				// Configurer le MutationObserver pour chaque champ d'entrée modifié par script
                const observer = new MutationObserver(() => {
                    handleInputChange(inputField); // Appeler la fonction lors d'un changement
                });

				// Observer les changements de l'attribut 'value' du champ d'entrée
                observer.observe(inputField, {
                    attributes: true, // Observer les changements d'attributs
                    attributeFilter: ['value'] // Filtrer pour ne réagir qu'aux changements de l'attribut 'value'
                });
			});

			// Gestion des événements de changement d'onglet (maj des valeurs modifiées des autres onglets)
			const navLinks = document.querySelectorAll('#myTab .nav-link');
				navLinks.forEach(link => {
				link.addEventListener('click', () => {
					handleTabValues();
				});
			});

			// Gestion de la soumission du formulaire
			const form = document.querySelector('form'); // Sélectionnez votre formulaire
			if (form && form.id === 'mainForm') {
				form.addEventListener('submit', (event) => {
					// Synchoniser les champs de tous les autres onglets
					handleTabValues();

					// Validation des données modifiées
					if (!validateMainForm()) {
						// Eviter la soumission du formulaire
						event.preventDefault();

						return; // Sortir de la fonction pour éviter la soumission
					}
				});
			}

			// Fonction pour restaurer la position sur l'onglet actif après le rechargement page
			window.onload = function() {
				const activeTabId = localStorage.getItem('activeTab');

				if (activeTabId) {
					const targetTab = document.getElementById(activeTabId);
					if (targetTab) {
						targetTab.click(); // Simule le clic sur l'onglet actif
					}
				}
			};

        </script>
    </div>
</body>
</html>
