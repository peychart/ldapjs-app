<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Carnet d'Annuaire</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        html, body {
            height: 100%; /* S'assure que html et body prennent toute la hauteur */
            margin: 0; /* Enlève les marges par défaut */
        }
        body {
            /* background-color: #FFFCC4; */ /* Commenté, vous avez déjà un dégradé */
            background: linear-gradient(to bottom, #fff4b2, #d1c93b); /* Dégradé du jaune clair vers un jaune plus doux */
            min-height: 100vh; /* La hauteur minimale du corps est de 100% de la fenêtre */
        }
        .form-control::placeholder {
            color: #b0b0b0; /* Couleur du placeholder (gris clair) */
            opacity: 1; /* Assurez-vous que l'opacité est à 1 */
        }
        .nav-tabs .nav-item .nav-link {
            border: 1px solid #fff4b2; /* Bordure pour tous les onglets */
            border-bottom: none; /* Enlève la bordure inférieure pour tous les onglets */
            background-color: #B19F8C; /* Fond beige pour les onglets */
            border-radius: 5px 5px 0 0; /* Arrondir uniquement le haut des onglets */
            margin-right: -1px; /* Pour éviter que les bordures se chevauchent */
            color: #000000; /* Couleur du texte en noir */
        }
        .nav-tabs .nav-item .nav-link.active {
            border: 1px solid #000000; /* Bordure noire pour l'onglet actif */
            border-bottom: none; /* Retire la bordure inférieure de l'onglet actif */
            border-right: 2px solid #000000; /* Assure que la bordure droite est visible */
            background-color: #ffffe0; /* Fond clair pour l'onglet actif */
            color: #000000; /* Couleur du texte de l'onglet actif en noir */
            padding-top: 9px; /* Ajustez selon vos besoins */
        }
        .nav-tabs .nav-item .nav-link:not(.active) { /* Cibler spécifiquement les onglets non actifs */
            background-color: #D1C6A9; /* Fond beige clair pour l'onglet non actif */
            border-bottom: 1px solid #000000; /* Ajoute une bordure inférieure noire pour les onglets non actifs */
            color: #000000; /* Couleur du texte en noir */
        }
        .tab-content {
            background-color: #ffffe0; /* Fond jaune clair pour le contenu des onglets */
            padding: 15px; /* Ajout de padding pour l'intérieur des onglets */
            border: 1px solid #000000; /* Bordure noire pour le contenu des onglets */
            border-radius: 5px; /* Coins arrondis pour le contenu des onglets */
            margin-top: -1px; /* Pour ajuster la superposition de la bordure avec les onglets */
        }
        .edit-btn {
            background: none;
            border: none;
            cursor: pointer;
            color: #007bff; /* Couleur du bouton d'édition */
            padding: 0; /* Supprime le padding pour un bouton plus compact */
            font-size: 0.9em; /* Réduit la taille de la police pour le bouton */
        }
        .edit-btn {
            font-size: 0.8em; /* Réduit la taille de l'icône */
        }
        .btn-restore {
            background-color: #FFE0B2; /* Couleur orange plus clair */
            border: 0px solid #F5F5DC; /* Bordure d'une teinte légèrement plus foncée */
            color: black; /* Couleur du texte en noir */
        }
        .btn-restore:hover {
            background-color: #FFA726; /* Couleur plus foncée au survol */
        }
        .btn-exit {
            background-color: #FFCC80; /* Couleur orange pastel */
            border: 0px solid #F5F5DC; /* Bordure d'une teinte légèrement plus foncée */
            color: black; /* Couleur du texte en black */
        }
        .btn-exit:hover {
            background-color: #FFA726; /* Couleur plus foncée au survol */
        }
        .btn-save {
            position: relative;
            background-color: #FFFFF0; /* Couleur beige pour le bouton */
            border: 0px solid #3A6A2A; /* Bordure vert foncé pour un meilleur contraste */
            color: #000; /* Couleur du texte par défaut */
        }
        .btn-save:hover {
            background-color: #E0E0E0; /* Couleur beige plus foncé au survol */
        }
        .btn-save.disabled:hover {
            background-color: #F5F5DC; /* Rétablir la couleur d'origine lorsqu'il est désactivé */
            cursor: not-allowed; /* Change le curseur pour indiquer que le bouton est désactivé */
        }
        .btn-save.enabled {
            color: #9B111E; /* Rouge rubis lorsqu'il est activé */
            background-color: #98FB98; /* Vert tendre lorsque activé */
        }
        .modal-content {
            background-color: #ffffe0; /* Fond jaune clair pour la modale */
            border-radius: 15px; /* Arrondir les angles de la fenêtre modale */
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2); /* Ajoute une ombre douce autour de la modale */
        }
		.custom-radio-group {
            display: flex;
            justify-content: space-between; /* Ecarte les boutons au maximum */
            width: 100%; /* S'assure que le conteneur prend toute la largeur disponible */
        }
        .form-check {
            flex: 1; /* Permet à chaque bouton de prendre une part égale de l'espace disponible */
            text-align: center; /* Centre le texte de chaque bouton */
        }
        .popup {
            position: absolute;
            background: white;
            border: 1px solid #ccc;
            width: 200px;
            max-height: 200px;
            overflow-y: auto;
            z-index: 1000;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        .editInput {
            flex: 1; /* Permet à l'input de remplir la largeur disponible */
            margin: 0; /* Supprime les marges pour un alignement parfait */
            /*margin-right: 5px;
            margin-left: 0px;*/
            padding: 8px; /* Espace intérieur pour un meilleur confort visuel */
            border: 1px solid #d3d3d3; /* Bordure grise */
            border-radius: 4px; /* Arrondi léger des coins */
            transition: border-color 0.3s; /* Transition douce pour les changements de couleur de bordure */
        }
        .editInput::placeholder {
            color: #b0b0b0; /* Couleur du placeholder (gris plus clair) */
            opacity: 1; /* Assurez-vous que l'opacité est à 1 pour que la couleur soit bien visible */
        }
        .option {
            padding: 5px;
            cursor: pointer;
        }
        .option:hover, .option.selected {
            background-color: #e0e0e0; /* Couleur de surbrillance pour l'option sélectionnée */
        }
        .add-button {
            background-color: green;
            color: white;
            border: none;
            padding: 5px 10px;
            cursor: pointer;
            border-radius: 5px;
        }
        .btn-delete {
            background-color: #dc3545; /* Rouge pour indiquer une action de suppression */
            color: white; /* Texte en blanc pour un bon contraste */
            border: none; /* Retirer la bordure par défaut */
            padding: 10px 15px; /* Espacement interne */
            cursor: pointer; /* Changer le curseur pour indiquer que c'est cliquable */
            border-radius: 5px; /* Coins arrondis */
            transition: background-color 0.3s; /* Animation de changement de couleur */
        }
        .btn-delete:hover {
            background-color: #c82333; /* Couleur plus foncée au survol */
        }
        .objectClassesContainer {
            display: flex; /* Utilisation de flexbox pour la mise en page */
            justify-content: space-between; /* Espace entre les colonnes */
            align-items: stretch; /* Alignement en haut des colonnes */
            height: calc(70vh - 100px); /* Hauteur fixe pour le conteneur */
        }
		.fixed-header {
            position: sticky; /* Rendre la position fixe quand on fait défiler */
            top: 0; /* Positionner en haut */
            background-color: #ffffe0; /* Fond blanc pour le titre */
            z-index: 10; /* Assurez-vous que le titre soit au-dessus du contenu */
            padding: 10px; /* Ajoute un peu de rembourrage */
            border-bottom: 1px solid #ccc; /* Optionnel : une bordure pour séparer du contenu */
        }
        .header-row {
            display: flex; /* Utiliser flexbox pour aligner les éléments en ligne */
            align-items: center; /* Centrer verticalement les éléments */
        }
        .header-row h4 {
            margin-right: 10px; /* Ajouter un peu d'espace entre le titre et le label */
        }
		.attribute-liste {
            margin-left: auto; /* Pousse cet élément vers la droite */
            text-align: right; /* Assurez-vous que le texte est aligné à droite */
        }
        .list {
            flex: 1; /* Permet aux listes de prendre une part égale de l'espace */
            overflow-y: auto; /* Activer le défilement si le contenu déborde */
            border: 1px solid #ccc; /* Bordure pour les listes */
            border-radius: 4px; /* Coins arrondis pour les listes */
            padding: 10px; /* Rembourrage intérieur */
            margin-top: 10px; /* Espace au-dessus des listes */
        }
        .list-item {
            margin: 5px 0;
            cursor: pointer;
            padding: 5px;
        }
        .list-item:hover {
            background-color: #f0f0f0;
        }
        .highlight {
            background-color: #ffeb3b; /* Couleur de surbrillance */
        }
        .placeholder {
            color: #888; /* Couleur grisée pour les messages d'instruction */
            font-style: italic; /* Italique pour le style */
            text-align: center; /* Centrer le texte */
            margin-top: 10px; /* Espace au-dessus du message */
        }
		.attributeList {
            position: sticky; /* L'élément reste fixe dans la fenêtre */
            top: 10px; /* Distance depuis le haut de la fenêtre */
            right: 20px; /* Distance depuis le bord droit de la fenêtre */
            width: 48%;
            max-height: 80vh; /* Hauteur maximale pour le défilement */
            overflow-y: auto; /* Activer le défilement si le contenu déborde */
            border: 1px solid #ccc;
            border-radius: 4px;
            padding: 10px;
            z-index: 10; /* Assurez-vous que l'élément est au-dessus des autres éléments */
        }
		.objectClassesCheckbox {
            margin-right: 10px; /* Ajustez la valeur pour plus ou moins d'espace */
        }
        h4 {
            margin: 0; /* Réinitialiser la marge */
            padding: 10px; /* Ajouter un peu de rembourrage pour le style */
            background-color: #fffacd; /* Couleur de fond pour les titres (jaune un peu plus foncé) */
            border-bottom: 1px solid #ccc; /* Bordure pour séparer le titre du contenu */
        }
    </style>
</head>
<body>
    <div class="container mt-5 position-relative">
        <h1>Carnet d'Annuaire</h1>

        <!-- Formulaire principal -->
        <form id="mainForm" action="/edit/<%= dn %>" method="POST">

            <!-- Conteneur pour les boutons avec Flexbox -->
            <div class="d-flex justify-content-between mb-3">
                <div class="d-flex"> <!-- Boutons à gauche -->
                    <button type="submit" id="saveButton" class="btn btn-save" style="width: 120px;" disabled>Valider</button>
                    <button type="button" id="restoreButton" class="btn btn-restore" onclick="restoreValues()">Restaurer les valeurs</button>
                    <button type="button" id="exitButton" class="btn btn-exit ml-2" style="width: 120px;" onclick="exit()">Sortir</button>
                </div>

                <div class="d-flex"> <!-- Boutons à droite -->
                    <button type="button" id="deleteButton" class="btn btn-delete ml-2" onclick="deleteEntry()">Supprimer</button>
                </div>
            </div>

            <!-- Nav tabs -->
            <ul class="nav nav-tabs" id="myTab" role="tablist">
                <% objectClassesDetails.forEach((objectClass, objectClassIndex) => {
                        const objName = objectClass.NAME[0];
                    %>
                    <li class="nav-item">
                        <a class="nav-link <%= objectClassIndex === 0 ? 'active' : '' %>"
                            id="<%= objName %>-tab"
                            data-toggle="tab"
                            href="#<%= objName %>"
                            role="tab"
                            aria-controls="<%= objName %>"
                            aria-selected="<%= objectClassIndex === 0 %>">
                                <%= objName %>
                            </a>
                    </li>
                <% }) %>
                <li class="nav-item">
                    <a class="nav-link" id="add-tab" data-toggle="tab" href="#add" role="tab" aria-controls="add" aria-selected="false">+</a>
                </li>
            </ul>

            <!-- Tab panes -->
            <div class="tab-content" id="myTabContent">
                <% objectClassesDetails.forEach((objectClass, objectClassIndex) => {
                    const objName = objectClass.NAME[0];
                %>
                    <div class="tab-pane fade <%= objectClassIndex === 0 ? 'show active' : '' %>" id="<%= objName %>" role="tabpanel" aria-labelledby="<%= objName %>-tab">
                        <% ['MUST', 'MAY'].forEach(TYPE => { %>
                            <h3 class="underline">Attributs <%= (TYPE === 'MUST' ?'obligatoires' :'optionnels') %> :</h3>
                            <ul>
                                <% objectClass[TYPE].forEach(currentAttr => {
                                        const attrName = currentAttr.NAME[0];
                                %>
                                <li>
                                    <strong><%= currentAttr.customWording || attrName %>:</strong>
                                    <button type="button" class="edit-btn" data-object-class-index='<%= objectClassIndex %>' onclick="openEditModal(this, '<%= attrName %>')">
                                        <i class="fas fa-pencil-alt"></i>
                                    </button>
									<% if (currentAttr.MULTI_VALUE !== 'SINGLE-VALUE') { %>
                                        <!-- popupMultiValues -->
                                        <div class="popupContainer" data-attr-name="<%= attrName %>">
                                            <div class="container" style="display: flex; width: 100%; padding: 0; margin: 0;">
                                                <input type="text"
                                                    class="editInput"
                                                    data-object-class-index = '<%= objectClassIndex %>'
                                                    placeholder="Éditez ici les valeurs  de l'attribut '<%= attrName %>'"
                                                    oninput="checkInputFunction(this, '<%= attrName %>');" />
                                                <!-- Champ caché pour soumettre les valeurs au formulaire -->
                                                <input type="hidden"
                                                    id="<%= attrName %>"
                                                    class="hiddenInput"
                                                    name="<%= attrName %>"
                                            		value="<%= JSON.stringify(Array.isArray(currentAttr.VALUES) ?(currentAttr.VALUES.length ?currentAttr.VALUES :['']) :Array.of(currentAttr.VALUES || [])) %>"
                                                <!-- Bouton d ajout d une valeur à l attribut -->
                                                <button type="button" class="add-button">+</button>
                                            </div>
                                            <div class="popup" style="display: none;"></div> <!-- Initialisation des options -->
                                        </div>
                                    <% } else { %>
                                        <input type="text"
                                            name="<%= attrName %>"
                                            value="<%= (Array.isArray(currentAttr.VALUES) ?currentAttr.VALUES[0] :currentAttr.VALUES) || '' %>"
                                            class="form-control"
                                            data-object-class-index = '<%= objectClassIndex %>'
                                            placeholder="Éditez ici la valeur de l'attribut '<%= attrName %>'"
                                            oninput="checkInputFunction(this, '<%= attrName %>');" />
                                    <% } %>
                                </li>
                                <% }) %>
                            </ul>
                        <% }) %>
                    </div>
                <% }) %>

                <!-- Tab pour ajouter une nouvelle objectClass -->
                <div class="tab-pane fade" id="add" role="tabpanel" aria-labelledby="add-tab">
                    <div class="sub-tabs">
                         <ul class="nav nav-tabs" id="subTab" role="tablist">
                             <li class="nav-item">
                                 <a class="nav-link active" id="structural-tab" data-toggle="tab" href="#structural" role="tab" aria-controls="structural" aria-selected="true">ObjectClasses STRUCTURAL</a>
                             </li>
                             <li class="nav-item">
                                 <a class="nav-link" id="auxiliary-tab" data-toggle="tab" href="#auxiliary" role="tab" aria-controls="auxiliary" aria-selected="false">ObjectClasses AUXILIARY</a>
                             </li>
                         </ul>

                         <!-- Contenu des sous-onglets -->
                         <div class="tab-content" id="subTabContent">
                             <div class="tab-pane fade show active" id="structural" role="tabpanel" aria-labelledby="structural-tab">
								 <div class="fixed-header">
								     <div class="header-row">
                                         <h4>ObjectClasses STRUCTURAL</h4>
                                         <h4 class="attribute-liste">Attributs:</h4>
                                     </div>
                                 </div>
                                 <div class="objectClassesContainer">
                                     <div class="list" id="objectClassListStructural">
                                         <!-- La liste des objectClasses STRUCTURAL sera générée ici -->
                                     </div>
                                     <div class="list attributeList" id="attributeListStructural">
                                         <div id="attributePlaceholderStructural" class="placeholder">
                                             Cliquer sur un objectClass pour afficher les attributs ...
                                         </div>
                                         <!-- La liste des attributs sera affichée ici -->
                                     </div>
                                 </div>
                             </div>
                             <div class="tab-pane fade" id="auxiliary" role="tabpanel" aria-labelledby="auxiliary-tab">
								 <div class="fixed-header">
								     <div class="header-row">
                                         <h4>ObjectClasses STRUCTURAL</h4>
                                         <h4 class="attribute-liste">Attributs:</h4>
                                     </div>
                                 <div class="objectClassesContainer">
                                     <div class="list" id="objectClassListAuxiliary">
                                         <!-- La liste des objectClasses AUXILIARY sera générée ici -->
                                     </div>
                                     <div class="list attributeList" id="attributeListAuxiliary">
                                         <h4>Attributs:</h4>
                                         <div id="attributePlaceholderAuxiliary" class="placeholder">
                                             Cliquer sur un objectClass pour afficher les attributs ...
                                         </div>
                                         <!-- La liste des attributs sera affichée ici -->
                                     </div>
                                 </div>
                             </div>
                         </div>
                     </div>
                </div>
            </div>
        </form>

        <!-- Modale pour l'édition d'attributs -->
        <div class="modal fade" id="editModal" tabindex="-1" role="dialog" aria-labelledby="editModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <form id="attrForm" action="/update-attributeCtl/<%= dn  %>" method="POST">
                        <div class="modal-header">
                            <h5 class="modal-title" id="editModalLabel"><strong>Modifier le libellé d'attribut "<span id="attributeName"></span>"</strong></h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Fermer">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <div class="form-group">
                                <label for="newLabel"><strong>Libellé d'affichage de l'attribut :</strong></label>
                                <input type="text" class="form-control" id="newLabel" name="newLabel" style='color:black;'>
                            </div>
                            <!-- Ajout des boutons radio -->
                            <div class="form-group">
                                <label><strong>Type d'attribut :</strong></label><br>
                                <div class="custom-radio-group"> <!-- Container flex pour les boutons radio -->
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="attributeType" id="singleValue" value="SINGLE-VALUE">
                                        <label class="form-check-label" for="singleValue">SINGLE-VALUE</label>
                                    </div>
                                    <div class="form-check" hidden>
                                        <input class="form-check-input" type="radio" name="attributeType" id="schema" value="SCHEMA" disabled>
                                        <label class="form-check-label" for="schema">SCHEMA</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="attributeType" id="multiValue" value="MULTI-VALUE" checked>
                                        <label class="form-check-label" for="schema">MULTI-VALUES</label>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group">
                                <label for="jsValidation"><strong>Code JS de contrôle de saisie :</strong></label>
                                <textarea class="form-control" id="jsValidation" name="jsValidation" rows="5" placeholder="Saisissez le code JavaScript ici..."></textarea>
                            </div>
                            <input type="hidden" id="attributeId" name="attributeId"> <!-- Champ caché pour l'attributeName -->
                        </div>
                        <div class="modal-footer d-flex justify-content-between">
                            <div>
                                <button type="button" class="btn btn-light btn-sm" onclick="changeModalSize(false)" style="background-color: #ffffe0; border: none;"> &gt;&lt; </button>
                                <button type="button" class="btn btn-light btn-sm" onclick="changeModalSize(true)" style="background-color: #ffffe0; border: none;"> &lt;&gt; </button>
                            </div>
                            <div>
                                <button type="button" class="btn btn-secondary" data-dismiss="modal">Annuler</button>
                                <button type="button" class="btn btn-primary" id="validerModale" onclick="submitModal(this)">Valider</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
        <script src="/js/popupMultiValues.js"></script>
        <script>
let activeTabId = localStorage.getItem('activeTab');
const objectClassesDetails = <%- JSON.stringify(objectClassesDetails) %>;
const ldapSchema = <%- JSON.stringify(ldapSchema) %>;

function checkInputFunction(input, attrName) {
	const objectClassIndex = parseInt(input.dataset.objectClassIndex);
	const objectClass = objectClassesDetails[objectClassIndex];
	const objectAttribute = objectClass.MUST?.find(attr => attr.NAME.includes(attrName))
							|| objectClass.MAY?.find(attr => attr.NAME.includes(attrName));

	// Excution des scripts personnailisés
	if (objectAttribute.valueCheck && objectAttribute.valueCheck[0]) {
		eval(objectAttribute.valueCheck[0]);
		check(input, objectClassesDetails, input.defaultValue);
	}

	// Mise à jour de l áttribut dans les autres oglets
	const allTabs = document.querySelectorAll('.tab-pane'); // Sélectionner tous les onglets
	allTabs.forEach(tab => {
		tab.querySelectorAll('input').forEach((field) => {
			if (field.name === input.name ) {
				field.value = input.value;
			}
		});
	});

	// Mise à jour de l'état du bouton de Validaion
	checkSaveButton();
}

function validateMainForm(form) {
	// Passer l'info au serveur du format JSON [] des inputs hidden de la 'mainForm' (attributs multi-valués)
	form.querySelectorAll('input[type="hidden"]').forEach(input => {
		input.name += '_hidden'
	});

/*
	// Exemple de validation : vérifier si l'email est valide
	const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/; // Expression régulière pour valider un email
	if (!emailPattern.test(email)) {
		errorMessage.innerText = 'Veuillez entrer une adresse email valide.';
		return false; // Empêche l'envoi du formulaire
	}
*/
	return true;
}

// Sauvegrder la position de l'onglet courant
function saveCurrentTab(){
	const activeTab = document.querySelector('.nav-link.active');
	if (activeTab ? activeTab.id : null) {
		localStorage.setItem('activeTab', activeTab.id);
	}
}

// Rafraichir la page et se repositionner sur l'onglet courant
function restoreValues() {
	if (!document.getElementById('saveButton').disabled
		&& !confirm("Des modifications sont en cours : êtes-vous sûr de vouloir les abandonner ?") )
			return;

	// Rafraichir la page
	saveCurrentTab();
	window.location.reload();
}

// Abandon de la page
function exit() {
	if (!document.getElementById('saveButton').disabled
		&& !confirm("Des modifications sont en cours : êtes-vous sûr de vouloir quitter ?") )
			return;

	window.location.href = '/search'; // Redirection vers la route '/search'
}

async function deleteEntry() {
	if (confirm("Êtes-vous sûr de vouloir supprimer cette entrée ?")) {

		// Logique de suppression de l'entrée dn
		try {
			const response = await fetch("/delete/<%= dn %>", {
				method: 'POST',
					headers: {
					'Content-Type': 'application/json'
					}
			});

			const data = await response.json();

			if (response.ok) {
				alert(data.message); // Message de succès
				window.location.href = data.redirect; // Redirection vers /search
			} else {
				alert(`Erreur: ${data.error}`);
			}
		} catch (error) {
			console.error('Erreur:', error);
			alert('Erreur lors de la suppression de l\'élément.');
		}
	}
}

// Edition des propriétés d'attribut
function openEditModal(button, attrName) {
	const objectClassIndex = parseInt(button.dataset.objectClassIndex);
	const objectClass = objectClassesDetails[objectClassIndex];
	const objectAttribute = objectClass.MUST?.find(attr => attr.NAME.includes(attrName))
		|| objectClass.MAY?.find(attr => attr.NAME.includes(attrName));
	document.getElementById('validerModale').dataset.objectClassIndex = objectClassIndex;
	if (!document.getElementById('saveButton').disabled) {
		alert("Opération impossible : il y a des modifications d'attributs en cours !");
		return;
	}

	// Label d'attribut
	const newLabelInputField = document.getElementById('newLabel');
	newLabelInputField.value = objectAttribute.customWording || '';
	newLabelInputField.placeholder = attrName;

	// Bontons radio SINGLE-VALUE/MULTI-VALUES:
	//	- OpenLDAP schema : not SINGLE-VALUE -> MULTI-VALUES,
	//	- this appli: can force SINGLE-VALUE.
	const radio = !!objectAttribute?.SINGLE_VALUE
			? 'singleValue'
			:(objectAttribute.MULTI_VALUE == null && objectAttribute.MULTI_VALUE !== 'SINGLE-VALUE')
				?'multiValue' :'singleValue';
	document.getElementById('multiValue').disabled = objectAttribute.SINGLE_VALUE;
	document.getElementById(radio).checked = true;
	document.getElementById('schema').disabled = true;

	// Script de validation des saisies
	document.getElementById('jsValidation').value = objectAttribute.valueCheck || '';

	document.getElementById('attributeName').textContent = attrName;
	document.getElementById('attributeId').value = objectAttribute.OID; // Pour envoi par le formulaire lors de la soumission

	saveCurrentTab();
	$('#editModal').modal('show');
}

function submitModal(submitButton) {
	const attrName = document.getElementById('newLabel').placeholder;
	const multiValue = document.getElementById('multiValue').checked;
	const objectClassIndex = parseInt(submitButton.dataset.objectClassIndex);
	const objectClass = objectClassesDetails[objectClassIndex];
	const objectAttribute = objectClass.MUST?.find(attr => attr.NAME.includes(attrName))
		|| objectClass.MAY?.find(attr => attr.NAME.includes(attrName));
	const singleValue = !!objectAttribute.SINGLE_VALUE;
	if (singleValue || (!singleValue && multiValue))
		document.getElementById('schema').checked = !(document.getElementById('schema').disabled = false);
	document.getElementById('attrForm').submit();
}

function changeModalSize(increase) {
	const modalDialog = document.querySelector('#editModal .modal-dialog');
	const currentClassList = modalDialog.classList;
	const jsValidationTextarea = document.getElementById('jsValidation');
	const greater = document.querySelector('.btn-light.btn-sm[onclick="changeModalSize(true)"]');
	const lower = document.querySelector('.btn-light.btn-sm[onclick="changeModalSize(false)"]');

	let currentSize = '';
	if (currentClassList.contains('modal-sm')) {
		currentSize = 'sm';
	} else if (currentClassList.contains('modal-lg')) {
		currentSize = 'lg';
	} else if (currentClassList.contains('modal-xl')) {
		currentSize = 'xl';
	}

	lower.style.color = greater.style.color = 'black';
	if (increase) {
		if (currentSize === 'sm') {
			currentClassList.remove('modal-sm');
			jsValidationTextarea.rows = 10;
		} else if (currentSize === '') {
			currentClassList.remove('modal-sm');
			currentClassList.add('modal-lg');
			jsValidationTextarea.rows = 15;
		} else if (currentSize === 'lg') {
			currentClassList.remove('modal-lg');
			currentClassList.add('modal-xl');
			jsValidationTextarea.rows = 20;
			greater.style.color = '#ffffe0';
			greater.blur();
		}
	} else {
		if (currentSize === 'xl') {
			currentClassList.remove('modal-xl');
			currentClassList.add('modal-lg');
			jsValidationTextarea.rows = 15;
		} else if (currentSize === 'lg') {
			currentClassList.remove('modal-lg');
			jsValidationTextarea.rows = 10;
		} else if (currentSize === '') {
			currentClassList.remove('modal-lg');
			currentClassList.add('modal-sm');
			jsValidationTextarea.rows = 5;
			lower.style.color = '#ffffe0';
			lower.blur();
		}
	}
}

// Valide le bouton 'saveButton' seulement sur modification d'attributs
function checkSaveButton() {
	const inputs = document.querySelectorAll('.tab-pane input[type="text"], .tab-pane input[type="hidden"]');
	let isAnyInputChanged = false;

	inputs.forEach(input => {
		if (input.name)
			if (input.value !== input.defaultValue)
				isAnyInputChanged = true;
   	});

	const saveButton = document.getElementById('saveButton');
	if (isAnyInputChanged) {
		saveButton.disabled = false;
		saveButton.classList.add('enabled');
		saveButton.classList.remove('disabled');
	} else {
		saveButton.disabled = true;
		saveButton.classList.remove('enabled');
		saveButton.classList.add('disabled');
	}
}

function objectClassesEdit(checkbox, objectClassName) {
	const tabContainer = document.querySelector('#myTab');
    const addTab = document.querySelector('#add-tab');

	// Sélectionner l'onglet correspondant à l'objectClass
	const tabLink = document.getElementById(objectClassName + '-tab');
	const tabPane = document.getElementById(objectClassName);

// Afficher l'état de tabContainer pour le débogage  
console.log('tabContainer:', tabContainer);
console.log('addTab:', addTab);
console.log('addTab parent:', addTab.parentNode); // Vérifie le parent de addTab

	if (checkbox.checked) {
		if (tabLink) {
			tabLink.style.display = "";	// Assurez-vous que l'onglet est visible
			tabPane.style.display = "";	// Assurez-vous que le contenu de l'onglet est visible
		} else {
			// Ajouter le nouvel onglet
			const newTab = document.createElement('li');
			newTab.className = 'nav-item';
			newTab.innerHTML = `<a class="nav-link active" id="${objectClassName}-tab" data-toggle="tab" href="#${objectClassName}" role="tab" aria-controls="${objectClassName}" aria-selected="true">${objectClassName}</a>`;

            if (addTab && tabContainer && tabContainer.contains(addTab)) {
                tabContainer.insertBefore(newTab, addTab);  // Insérer avant l'onglet d'ajout  
            } else {
                console.warn('addTab is not present in tabContainer or tabContainer is undefined.');
                tabContainer.appendChild(newTab);  // Ajouter à la fin si l'onglet d'ajout n'est pas trouvé  
            }

			const newTabPane = document.createElement('div');
			newTabPane.className = 'tab-pane fade show active';
			newTabPane.id = objectClassName;
			newTabPane.role = 'tabpanel';
			newTabPane.setAttribute('aria-labelledby', objectClassName + '-tab');

			// Générer le contenu d'attributs
			let attributesHTML = '';
			['MUST', 'MAY'].forEach(TYPE => {
				attributesHTML += `<h3 class="underline">Attributs ${TYPE === 'MUST' ? 'obligatoires' : 'optionnels'} :</h3><ul>`;
				objectClass[TYPE].forEach(currentAttr => {
					const attrName = currentAttr.NAME[0];
					attributesHTML += `
						<li>
							<strong>${currentAttr.customWording || attrName}:</strong>
							<button type="button" class="edit-btn" data-object-class-index='${objectClassIndex}' onclick="openEditModal(this, '${attrName}')">
								<i class="fas fa-pencil-alt"></i>
							</button>
							${currentAttr.MULTI_VALUE !== 'SINGLE-VALUE' ? `
								<div class="popupContainer" data-attr-name="${attrName}">
									<div class="container" style="display: flex; width: 100%; padding: 0; margin: 0;">
										<input type="text" class="editInput" data-object-class-index='${objectClassIndex}' placeholder="Éditez ici les valeurs de l'attribut '${attrName}'" oninput="checkInputFunction(this, '${attrName}');" />
										<input type="hidden" id="${attrName}" class="hiddenInput" name="${attrName}" value='${JSON.stringify(Array.isArray(currentAttr.VALUES) ? (currentAttr.VALUES.length ? currentAttr.VALUES : ['']) : Array.of(currentAttr.VALUES || []))}' />
										<button type="button" class="add-button">+</button>
									</div>
									<div class="popup" style="display: none;"></div>
									</div>` : `
								<input type="text" name="${attrName}" value='${(Array.isArray(currentAttr.VALUES) ? currentAttr.VALUES[0] : currentAttr.VALUES) || ''}' class="form-control" data-object-class-index='${objectClassIndex}' placeholder="Éditez ici la valeur de l'attribut '${attrName}'" oninput="checkInputFunction(this, '${attrName}');" />
							`}
						</li>`;
				});
				attributesHTML += `</ul>`;
			});

			newTabPane.innerHTML = attributesHTML;
			document.querySelector('#myTabContent').insertBefore(newTabPane, document.querySelector('#add'));
		}
	} else {
		if (tabLink) {
			let msg = 'Êtes-vous sûr de vouloir ' + (checkbox.checked ? 'ajouter' : 'supprimé')
				+ ' cet objetClass ' + (checkbox.checked ? 'au' : 'du') + ' DN en cours d\'édition ?'
				+ (checkbox.checked ? '' : '\n(certaines données seront probablement perdues ...)');
			if (confirm(msg)) {
				// Supprimer l'onglet
				tabLink.style.display = "none";	// Cacher l'onglet
 				tabPane.style.display = "none";	// Cacher le contenu de l'onglet
			} else {
				checkbox.checked = true;
			}
		}
	}
}

// Gestion de la soumission du formulaire
const form = document.querySelector('form'); // Sélection formulaire
if ( form?.id === 'mainForm') {
	form.addEventListener('submit', (event) => {
		// Validation des données modifiées
		if (!validateMainForm(form)) {
			// Eviter la soumission du formulaire
			event.preventDefault();
			return; // Sortir de la fonction pour éviter la soumission
		}
	});
}

// Fonction pour restaurer la position sur l'onglet actif après le rechargement page
window.onload = function() {
	activeTabId = localStorage.getItem('activeTab');
	if (activeTabId) {
		const targetTab = document.getElementById(activeTabId);
		if (targetTab) {
			targetTab.click(); // Simule le clic sur l'onglet actif
		}
	}
};

function findAttrPropertyByName(name, property) {
	const attribute = ldapSchema.attributes.find(attr =>
		attr.NAME.includes(name) // Vérifie si le NAME contient le nom recherché
	);
	return attribute ?attribute[property] || null :null;
}

// AFFICHAGE de l'onglet "+"
const structuralObjectClassList = document.getElementById('objectClassListStructural');
const auxiliaryObjectClassList = document.getElementById('objectClassListAuxiliary');
const attributeListStructural = document.getElementById('attributeListStructural');
const attributeListAuxiliary = document.getElementById('attributeListAuxiliary');
const attributePlaceholderStructural = document.getElementById('attributePlaceholderStructural');
const attributePlaceholderAuxiliary = document.getElementById('attributePlaceholderAuxiliary');
const attributeHeader = document.querySelector('.attribute-liste');

// Créer un tableau des types d'objectClasses
const objectClassTypes = [
	{ type: 'STRUCTURAL', objectClassList: structuralObjectClassList, attributeList: attributeListStructural, attributePlaceholder: attributePlaceholderStructural },
	{ type: 'AUXILIARY', objectClassList: auxiliaryObjectClassList, attributeList: attributeListAuxiliary, attributePlaceholder: attributePlaceholderAuxiliary }
];

// Remplir la liste des objectClasses
objectClassTypes.forEach(({ type, objectClassList, attributeList, attributePlaceholder }) => {
	ldapSchema.objectClasses.forEach((objectClass) => {
		if (objectClass.TYPE !== type) return;

		const listItem = document.createElement('div');
		listItem.className = 'list-item';

		// Vérifier si l'objectClass est présente dans objectClassesDetails
		const isChecked = objectClassesDetails.some(detail => detail.NAME.includes(objectClass.NAME[0]));

		// Créer la case à cocher
		const checkbox = document.createElement('input');
		checkbox.type = 'checkbox';
		checkbox.className = 'checkbox objectClassesCheckbox';
		checkbox.checked = isChecked;

		// Ajouter la case à cocher et le nom de l'ObjectClass dans l'élément de liste
		listItem.appendChild(checkbox);
		listItem.appendChild(document.createTextNode(objectClass.NAME[0]));
		listItem.title = objectClass.DESC || "Pas de description disponible";

		// Événement de clic pour gérer l'état de la case à cocher
		checkbox.onclick = function(event) {
			event.stopPropagation(); // Empêche la propagation du clic pour ne pas déclencher la surbrillance
			objectClassesEdit(checkbox, objectClass.NAME[0]);
		};

		// Événement de clic pour mettre en surbrillance l'objectClass et afficher les attributs
		listItem.onclick = function() {
			let hasAttributes = false;

			// Vérifiez si l'item est déjà surligné
			const isHighlighted = listItem.classList.contains('highlight');

			// Surbrillance de l'objectClass cliqué
			const highlighted = objectClassList.getElementsByClassName('highlight');
			Array.from(highlighted).forEach(item => {
				item.classList.remove('highlight');
			});

			// Vider la liste des attributs
			attributeList.innerHTML = '';
			attributeList.appendChild(attributePlaceholder);

			if (!isHighlighted) {
				listItem.classList.add('highlight');

				// Ajouter les attributs MUST et MAY correspondants
				['MUST', 'MAY'].forEach(key => {
					for (const attrKey in objectClass[key]) {
						const attrItem = document.createElement('div');
						attrItem.className = 'list-item';
						attrItem.innerText = `${objectClass[key][attrKey]} (${key})`; // Le nom de l'attribut
						attrItem.title = findAttrPropertyByName(objectClass[key][attrKey], 'DESC') || 'Aucune description disponible.';
						attributeList.appendChild(attrItem);
						hasAttributes = true; // Indiquer qu'il y a des attributs
					}
				});
				attributeHeader.innerHTML = 'Attributs' + (hasAttributes ? ' de \'<strong>' + objectClass.NAME[0] + '</strong>\'' : '') + ':';
				attributePlaceholder.innerText = hasAttributes ? '' : 'Aucun attribut pour cet objectClass.';
			} else {
				listItem.classList.remove('highlight');
				attributePlaceholder.innerText = 'Cliquer sur un objectClass pour afficher ses attributs ...';
			}

			// Si aucun attribut n'est trouvé, afficher le message approprié
			//attributeList.innerHTML = '<h4>Attributs' + (hasAttributes ? ' de \'' + objectClass.NAME[0] + '\'' : '') + ':</h4>' + attributeList.innerHTML;
		}

		objectClassList.appendChild(listItem);
	});
});
		</script>
	</div>
</body>
</html>
